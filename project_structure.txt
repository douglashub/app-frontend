
=== /Users/micaelsantana/Documents/app-frontend/src/contexts/NotificationContext.jsx ===

import React, { createContext, useState, useContext } from 'react';
import Notification from '../components/common/Notification';

// Create context
const NotificationContext = createContext();

// Custom hook to use the notification context
export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

// Provider component
export const NotificationProvider = ({ children }) => {
  const [notification, setNotification] = useState({
    message: '',
    type: 'success',
    duration: 4000
  });

  const showNotification = ({ message, type = 'success', duration = 4000 }) => {
    // Handle multiline messages
    const formattedMessage = Array.isArray(message) ? message.join('\n') : message;
    setNotification({ message: formattedMessage, type, duration });
  };

  const clearNotification = () => {
    setNotification({ ...notification, message: '' });
  };

  // Enhanced notification methods with better error handling
  const showSuccess = (message, duration = 4000) => {
    showNotification({ message, type: 'success', duration });
  };

  const showError = (error, duration = 6000) => {
    let message = error;
    
    // Handle API errors
    if (error?.response) {
      message = error.userMessage || error.response.data?.message || 'Ocorreu um erro inesperado';
    } else if (typeof error === 'object') {
      message = error.message || 'Ocorreu um erro inesperado';
    }

    showNotification({ message, type: 'error', duration });
  };

  const showWarning = (message, duration = 5000) => {
    showNotification({ message, type: 'warning', duration });
  };

  const showInfo = (message, duration = 4000) => {
    showNotification({ message, type: 'info', duration });
  };

  return (
    <NotificationContext.Provider 
      value={{ 
        showNotification,
        clearNotification,
        showSuccess,
        showError,
        showWarning,
        showInfo
      }}
    >
      {children}
      <Notification 
        message={notification.message}
        type={notification.type}
        duration={notification.duration}
        onClose={clearNotification}
      />
    </NotificationContext.Provider>
  );
};
=== /Users/micaelsantana/Documents/app-frontend/src/utils/errorHandler.js ===

/**
 * Utility functions for handling API errors and providing user-friendly messages
 */

// Map of HTTP status codes to user-friendly messages
const HTTP_ERROR_MESSAGES = {
  400: 'Os dados fornecidos são inválidos',
  401: 'Sua sessão expirou. Por favor, faça login novamente',
  403: 'Você não tem permissão para realizar esta ação',
  404: 'O recurso solicitado não foi encontrado',
  422: 'Os dados fornecidos são inválidos',
  429: 'Muitas tentativas. Por favor, aguarde um momento',
  500: 'Ocorreu um erro no servidor. Tente novamente mais tarde',
  503: 'Serviço temporariamente indisponível. Tente novamente mais tarde'
};

// Map of validation error fields to user-friendly labels
const FIELD_LABELS = {
  nome: 'Nome',
  email: 'E-mail',
  telefone: 'Telefone',
  placa: 'Placa',
  modelo: 'Modelo',
  capacidade: 'Capacidade',
  ano_fabricacao: 'Ano de Fabricação',
  horario_inicio: 'Horário de Início',
  horario_fim: 'Horário de Fim',
  status: 'Status'
};

/**
 * Format validation errors into user-friendly messages
 * @param {Object} errors - Validation errors object from API
 * @returns {string} Formatted error message
 */
export const formatValidationErrors = (errors) => {
  if (!errors || typeof errors !== 'object') return 'Dados inválidos fornecidos';

  return Object.entries(errors)
    .map(([field, messages]) => {
      const label = FIELD_LABELS[field] || field;
      const message = Array.isArray(messages) ? messages[0] : messages;
      return `${label}: ${message}`;
    })
    .join('\n');
};

/**
 * Get a user-friendly error message from an API error
 * @param {Error} error - The error object from API call
 * @returns {string} User-friendly error message
 */
export const getErrorMessage = (error) => {
  if (!error) return 'Ocorreu um erro desconhecido';

  // Handle network errors
  if (!error.response) {
    return 'Não foi possível conectar ao servidor. Verifique sua conexão';
  }

  const { status, data } = error.response;

  // Handle validation errors
  if (status === 422 && data.errors) {
    return formatValidationErrors(data.errors);
  }

  // Handle known HTTP status codes
  if (HTTP_ERROR_MESSAGES[status]) {
    return HTTP_ERROR_MESSAGES[status];
  }

  // Handle errors with message in response
  if (data.message) {
    return data.message;
  }

  // Default error message
  return 'Ocorreu um erro inesperado. Tente novamente mais tarde';
};

/**
 * Format error details for logging
 * @param {Error} error - The error object
 * @returns {Object} Formatted error details
 */
export const formatErrorForLogging = (error) => {
  return {
    message: error.message,
    status: error.response?.status,
    data: error.response?.data,
    url: error.config?.url,
    method: error.config?.method,
    timestamp: new Date().toISOString()
  };
};
=== /Users/micaelsantana/Documents/app-frontend/src/index.css ===

@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
  overflow-x: hidden;
}

body {
  @apply min-h-screen bg-blue-50;
}

.primary {
  @apply text-blue-600;
}

.secondary {
  @apply text-green-600;
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/DataTable.jsx ===

import React, { useState } from 'react'

export default function DataTable({ 
  columns, 
  data = [], 
  onEdit, 
  onDelete,
  loading,
  error
}) {
  // Ensure data is always an array
  const safeData = Array.isArray(data) ? data : [];
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 10;
  const totalPages = Math.ceil(safeData.length / rowsPerPage);
  const paginatedData = safeData.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );
  
  return (
    <div className="bg-white overflow-hidden">
      {loading && (
        <div className="flex justify-center items-center p-8">
          <div className="flex items-center">
            <svg className="animate-spin h-5 w-5 mr-3 text-blue-500" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span>Carregando dados...</span>
          </div>
        </div>
      )}

      {error && (
        <div className="p-4 text-red-600 bg-red-50 rounded-md m-4 flex items-start">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
          <span>{error}</span>
        </div>
      )}

      {!loading && !error && (
        <>
          <div className="overflow-x-auto">
            <table className="w-full table-auto min-w-full">
              <thead>
                <tr className="text-left border-b">
                  {columns.map((col) => (
                    <th key={col.key} scope="col" className="px-4 py-3 text-sm font-medium text-gray-500 uppercase">
                      {col.header}
                    </th>
                  ))}
                  <th scope="col" className="px-4 py-3 text-right text-sm font-medium text-gray-500 uppercase">
                    Ações
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100">
                {paginatedData.length === 0 ? (
                  <tr>
                    <td colSpan={columns.length + 1} className="px-4 py-8 text-center text-gray-500">
                      <div className="flex flex-col items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-gray-300 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span>Nenhum registro encontrado</span>
                      </div>
                    </td>
                  </tr>
                ) : (
                  paginatedData.map((item) => (
                    <tr key={item.id} className="hover:bg-gray-50">
                      {columns.map((col) => (
                        <td key={col.key} className="px-4 py-3 text-sm text-gray-900">
                          {col.format ? col.format(item) : item[col.key]}
                        </td>
                      ))}
                      <td className="px-4 py-3 text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <button
                            onClick={() => onEdit(item)}
                            className="text-blue-600 hover:text-blue-800"
                            title="Editar"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                          <button
                            onClick={() => onDelete(item)}
                            className="text-red-600 hover:text-red-800"
                            title="Excluir"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
          
          {/* Pagination Controls */}
          {totalPages > 1 && (
            <div className="px-6 py-3 flex items-center justify-between border-t border-gray-200">
              <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                  <p className="text-sm text-gray-700">
                    Mostrando <span className="font-medium">{(currentPage - 1) * rowsPerPage + 1}</span> a <span className="font-medium">
                      {Math.min(currentPage * rowsPerPage, safeData.length)}
                    </span> de <span className="font-medium">{safeData.length}</span> resultados
                  </p>
                </div>
                <div>
                  <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                    <button
                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                      disabled={currentPage === 1}
                      className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
                        currentPage === 1 
                          ? 'text-gray-300 cursor-not-allowed' 
                          : 'text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      <span className="sr-only">Anterior</span>
                      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </button>
                    
                    {/* Page Numbers */}
                    {[...Array(totalPages)].map((_, i) => (
                      <button
                        key={i}
                        onClick={() => setCurrentPage(i + 1)}
                        className={`relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium ${
                          currentPage === i + 1
                            ? 'bg-blue-50 border-blue-500 text-blue-600 z-10'
                            : 'bg-white text-gray-500 hover:bg-gray-50'
                        }`}
                      >
                        {i + 1}
                      </button>
                    ))}
                    
                    <button
                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                      disabled={currentPage === totalPages}
                      className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
                        currentPage === totalPages 
                          ? 'text-gray-300 cursor-not-allowed' 
                          : 'text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      <span className="sr-only">Próximo</span>
                      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                      </svg>
                    </button>
                  </nav>
                </div>
              </div>
              
              {/* Mobile pagination */}
              <div className="flex sm:hidden justify-between items-center w-full">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className={`relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md ${
                    currentPage === 1 
                      ? 'text-gray-300 bg-gray-50 cursor-not-allowed' 
                      : 'text-gray-700 bg-white hover:bg-gray-50'
                  }`}
                >
                  Anterior
                </button>
                <span className="text-sm text-gray-500">
                  Página {currentPage} de {totalPages}
                </span>
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className={`relative inline-flex items-center px-4 py-2 ml-3 border border-gray-300 text-sm font-medium rounded-md ${
                    currentPage === totalPages 
                      ? 'text-gray-300 bg-gray-50 cursor-not-allowed' 
                      : 'text-gray-700 bg-white hover:bg-gray-50'
                  }`}
                >
                  Próximo
                </button>
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
};
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/StatusBadge.jsx ===

import React from 'react'

export default function StatusBadge({ status, type = 'default', size = 'md' }) {
  // Status types can be expanded for different contexts
  const statusMap = {
    // Generic statuses
    active: { bg: 'bg-green-100', text: 'text-green-800', label: 'active' },
    inactive: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'inactive' },
    pending: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'Pendente' },
    completed: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Concluído' },
    canceled: { bg: 'bg-red-100', text: 'text-red-800', label: 'Cancelada' },
    
    // Ônibus specific
    maintenance: { bg: 'bg-orange-100', text: 'text-orange-800', label: 'Em Manutenção' },
    
    // Viagem specific
    in_progress: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Em Andamento' },
    scheduled: { bg: 'bg-purple-100', text: 'text-purple-800', label: 'Programada' },
    
    // Aluno specific
    enrolled: { bg: 'bg-green-100', text: 'text-green-800', label: 'Matriculado' },
    graduated: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Formado' },
    
    // Fallback
    default: { bg: 'bg-gray-100', text: 'text-gray-800', label: status }
  };

  // For context-specific labels we can override based on type
  const contextMap = {
    aluno: {
      active: { label: 'Ativo' },
      inactive: { label: 'Inativo' }
    },
    onibus: {
      active: { label: 'Em Operação' },
      inactive: { label: 'Fora de Serviço' }
    },
    rota: {
      active: { label: 'Ativa' },
      inactive: { label: 'Temporária' }
    },
    viagem: {
      completed: { label: 'Concluída' },
      pending: { label: 'Programada' },
      in_progress: { label: 'Em andamento' },
      canceled: { label: 'Cancelada' }
    }
  };

  // Size variants
  const sizeClasses = {
    sm: 'px-2 py-0.5 text-xs',
    md: 'px-2 py-1 text-xs',
    lg: 'px-2 py-1 text-xs'
  };

  // Get base styling
  const baseStyle = statusMap[status] || statusMap.default;
  
  // Apply context override if applicable
  let label = baseStyle.label;
  if (contextMap[type] && contextMap[type][status]) {
    label = contextMap[type][status].label;
  }
  
  return (
    <span className={`inline-flex items-center justify-center rounded-full font-normal ${baseStyle.bg} ${baseStyle.text} ${sizeClasses[size]}`}>
      {label}
    </span>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/ConfirmationModal.jsx ===

import React from 'react';

export default function ConfirmationModal({ 
  isOpen, 
  onClose, 
  onConfirm, 
  title,
  message,
  confirmText = "Confirmar",
  cancelText = "Cancelar",
  isDeleting = false
}) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
      <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        {/* Background overlay */}
        <div 
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
          aria-hidden="true"
          onClick={onClose}
        ></div>

        {/* Modal panel */}
        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className={`mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full ${isDeleting ? 'bg-red-100' : 'bg-blue-100'} sm:mx-0 sm:h-10 sm:w-10`}>
                {isDeleting ? (
                  <svg className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                ) : (
                  <svg className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                )}
              </div>
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                  {title}
                </h3>
                <div className="mt-2">
                  <p className="text-sm text-gray-500">
                    {message}
                  </p>
                </div>
              </div>
            </div>
          </div>
          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              className={`w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 ${isDeleting ? 'bg-red-600 hover:bg-red-700 focus:ring-red-500' : 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'} text-base font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm`}
              onClick={onConfirm}
            >
              {confirmText}
            </button>
            <button
              type="button"
              className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
              onClick={onClose}
            >
              {cancelText}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/FormModal.jsx ===

import React from 'react';

export default function FormModal({ 
  isOpen, 
  onClose, 
  title, 
  children, 
  onSubmit,
  isSubmitting = false
}) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
      <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        {/* Background overlay */}
        <div 
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
          aria-hidden="true"
          onClick={onClose}
        ></div>

        {/* Modal panel */}
        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                  {title}
                </h3>
                
                <div className="mt-4">
                  <form onSubmit={onSubmit}>
                    {children}
                    
                    <div className="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                      <button
                        type="submit"
                        disabled={isSubmitting}
                        className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:col-start-2 sm:text-sm"
                      >
                        {isSubmitting ? (
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                        ) : null}
                        Salvar
                      </button>
                      <button
                        type="button"
                        onClick={onClose}
                        className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:col-start-1 sm:text-sm"
                      >
                        Cancelar
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/Notification.jsx ===

import React, { useState, useEffect } from 'react';

export default function Notification({ 
  message, 
  type = 'success', // 'success', 'error', 'warning', 'info'
  duration = 4000,
  onClose
}) {
  const [isVisible, setIsVisible] = useState(true);
  const [isLeaving, setIsLeaving] = useState(false);

  useEffect(() => {
    if (!message) return;
    
    setIsVisible(true);
    setIsLeaving(false);
    
    const timer = setTimeout(() => {
      handleClose();
    }, duration);

    return () => clearTimeout(timer);
  }, [message, duration]);

  const handleClose = () => {
    setIsLeaving(true);
    setTimeout(() => {
      setIsVisible(false);
      if (onClose) onClose();
    }, 300); // Match animation duration
  };

  if (!message || !isVisible) return null;

  const typeClasses = {
    success: 'bg-green-100 text-green-800 border-green-300',
    error: 'bg-red-100 text-red-800 border-red-300',
    warning: 'bg-yellow-100 text-yellow-800 border-yellow-300',
    info: 'bg-blue-100 text-blue-800 border-blue-300'
  };

  const iconMap = {
    success: (
      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
      </svg>
    ),
    error: (
      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
      </svg>
    ),
    warning: (
      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
      </svg>
    ),
    info: (
      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z" clipRule="evenodd" />
      </svg>
    )
  };

  return (
    <div 
      className={`fixed bottom-5 right-5 z-50 transition-all duration-300 ease-in-out
        ${isLeaving ? 'opacity-0 translate-x-full' : 'opacity-100 translate-x-0'}`}
    >
      <div className={`
        px-4 py-3 rounded-md shadow-lg border ${typeClasses[type]}
        flex items-start max-w-md
        transform transition-transform duration-200 hover:scale-102
        ${message.includes('\n') ? 'whitespace-pre-line' : ''}
      `}>
        <div className="flex-shrink-0 mr-3">
          {iconMap[type]}
        </div>
        <div className="flex-grow">
          {message}
        </div>
        <button 
          className="ml-3 text-gray-500 hover:text-gray-700 transition-colors duration-200"
          onClick={handleClose}
          aria-label="Close notification"
        >
          <svg className="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
          </svg>
        </button>
      </div>
    </div>
  );

}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/StatCard.jsx ===

import React from 'react'
import { ArrowUpIcon, UsersIcon, TruckIcon, MapIcon } from '@heroicons/react/24/outline'

export default function StatCard({ title, value, icon, color }) {
  const Icon = {
    students: UsersIcon,
    buses: TruckIcon,
    routes: MapIcon,
    default: ArrowUpIcon
  }[icon] || ArrowUpIcon

  return (
    <div className="bg-blue-50 p-6 rounded-lg shadow-sm border border-gray-100">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-gray-500 mb-1">{title}</p>
          <p className="text-3xl font-semibold text-gray-900">{value}</p>
        </div>
        <div className={`p-3 rounded-full bg-${color}-100`}>
          <Icon className={`w-8 h-8 text-${color}-600`} />
        </div>
      </div>
    </div>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/main.jsx ===

import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './index.css' // Make sure this line is present and before App import

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
)
=== /Users/micaelsantana/Documents/app-frontend/src/App.jsx ===

import React, { useState } from 'react'
import { Routes, Route, Link, useLocation, BrowserRouter } from 'react-router-dom'
import { NotificationProvider } from './contexts/NotificationContext.jsx'
import Dashboard from './pages/Dashboard'
import Alunos from './pages/Alunos'
import Login from './pages/Login'
import Onibus from './pages/Onibus'
import Rotas from './pages/Rotas'
import Viagens from './pages/Viagens'
import Monitores from './pages/Monitores'

// The App component is the only one using BrowserRouter now
const App = () => {
  return (
    <BrowserRouter future={{
      v7_startTransition: true,
      v7_relativeSplatPath: true,
      v7_fetcherPersist: true,
      v7_normalizeFormMethod: true,
      v7_partialHydration: true
    }}>
      <AppContent />
    </BrowserRouter>
  );
}

// The main app content extracted into a separate component
const AppContent = () => {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const location = useLocation();
  
  // Check if current path is active
  const isActive = (path) => {
    return location.pathname === path || 
           (location.pathname === '/' && path === '/dashboard');
  };
  
  // Don't render sidebar on login page
  if (location.pathname === '/login') {
    return (
      <NotificationProvider>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="*" element={<Login />} />
        </Routes>
      </NotificationProvider>
    );
  }

  return (
    <NotificationProvider>
      <div className="h-screen flex flex-col md:flex-row w-full bg-blue-50 overflow-hidden">
        {/* Sidebar - Always visible but collapsible on smaller screens */}
        <div className={`
          bg-gray-800 text-white transition-all duration-300 
          ${sidebarCollapsed ? 'w-16' : 'w-64'} 
          flex-shrink-0 sticky top-0 h-screen z-30
        `}>
          {/* Sidebar Header with Toggle Button */}
          <div className="flex items-center justify-between p-4 border-b border-gray-700">
            {!sidebarCollapsed && (
              <div>
                <h2 className="text-xl font-bold text-blue-400">Coracao</h2>
                <p className="text-sm text-gray-400">Sistema de Transporte</p>
              </div>
            )}
            <button 
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              className="text-gray-400 hover:text-white p-1 rounded-md"
              aria-label={sidebarCollapsed ? "Expand sidebar" : "Collapse sidebar"}
            >
              {sidebarCollapsed ? (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
                </svg>
              )}
            </button>
          </div>
          
          {/* Navigation Links */}
          <nav className="mt-4 overflow-y-auto h-[calc(100%-4rem)]">
            <ul>
              <li>
                <Link 
                  to="/dashboard"
                  className={`flex items-center py-3 px-4 w-full text-left ${isActive('/dashboard') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                  title="Dashboard"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                  </svg>
                  {!sidebarCollapsed && <span className="ml-3">Dashboard</span>}
                </Link>
              </li>
              <li>
                <Link 
                  to="/onibus"
                  className={`flex items-center py-3 px-4 w-full text-left ${isActive('/onibus') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                  title="Ônibus"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h8m-8 5h8m-4 6v-4m4 4v-4" />
                  </svg>
                  {!sidebarCollapsed && <span className="ml-3">Ônibus</span>}
                </Link>
              </li>
              <li>
                <Link 
                  to="/alunos"
                  className={`flex items-center py-3 px-4 w-full text-left ${isActive('/alunos') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                  title="Alunos"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  {!sidebarCollapsed && <span className="ml-3">Alunos</span>}
                </Link>
              </li>
              <li>
                <Link 
                  to="/rotas"
                  className={`flex items-center py-3 px-4 w-full text-left ${isActive('/rotas') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                  title="Rotas"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                  </svg>
                  {!sidebarCollapsed && <span className="ml-3">Rotas</span>}
                </Link>
              </li>
              <li>
                <Link 
                  to="/viagens"
                  className={`flex items-center py-3 px-4 w-full text-left ${isActive('/viagens') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                  title="Viagens"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  {!sidebarCollapsed && <span className="ml-3">Viagens</span>}
                </Link>
              </li>
              <li className="mt-6 border-t border-gray-700 pt-4">
                <Link 
                  to="/login"
                  className="flex items-center py-3 px-4 w-full text-left text-gray-300 hover:bg-gray-700"
                  title="Sair"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                  </svg>
                  {!sidebarCollapsed && <span className="ml-3">Sair</span>}
                </Link>
              </li>
            </ul>
          </nav>
        </div>
        
        {/* Main Content */}
        <div className="flex-1 h-full bg-blue-50 overflow-auto">
          <main className="px-6 py-4 w-full h-full">
            <Routes>
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/" element={<Dashboard />} />
              <Route path="/alunos" element={<Alunos />} />
              <Route path="/onibus" element={<Onibus />} />
              <Route path="/monitores" element={<Monitores />} />
              <Route path="/rotas" element={<Rotas />} />
              <Route path="/viagens" element={<Viagens />} />
            </Routes>
          </main>
        </div>
      </div>
    </NotificationProvider>
  );
}

export default App;
=== /Users/micaelsantana/Documents/app-frontend/src/api/services.js ===

import axios from 'axios';

// Axios configuration
const api = axios.create({
  baseURL: '/api',
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  },
  timeout: 15000 // 15 seconds
});

// Request interceptor for logging
api.interceptors.request.use(request => {
  // console.log('API Request:', request.method, request.url);
  return request;
}, error => {
  console.error('API Request Error:', error);
  return Promise.reject(error);
});

import { getErrorMessage, formatErrorForLogging } from '../utils/errorHandler';

// Response interceptor for error handling
api.interceptors.response.use(
  response => {
    // Success processing
    return response;
  },
  error => {
    // Log error details for debugging
    console.error('API Error:', formatErrorForLogging(error));
    
    // Handle specific errors
    if (error.response?.status === 401) {
      // Redirect to login if unauthorized
      window.location.href = '/login';
    }
    
    // Get user-friendly error message
    error.userMessage = getErrorMessage(error);
    
    return Promise.reject(error);
  }
);

/**
 * Format time values for API (HH:mm to H:i)
 * @param {string} time - Time in HH:mm format 
 * @returns {string} - Time in H:i format or null if input is empty
 */
function formatTimeForApi(time) {
  if (!time) return null;
  
  try {
    // Split time into hours and minutes
    const [hours, minutes] = time.split(':');
    
    // Convert hours to integer to remove leading zeros
    const hour = parseInt(hours, 10);
    
    // Return formatted time (H:i format as Laravel expects)
    return `${hour}:${minutes}`;
  } catch (error) {
    console.error('Error formatting time:', error);
    return null;
  }
}

/**
 * Format time values from API (H:i) to HTML time input format (HH:mm)
 * @param {string} time - Time in H:i format
 * @returns {string} - Time in HH:mm format
 */
function formatTimeForDisplay(time) {
  if (!time) return '';
  
  try {
    // Handle different time formats from API
    const timeParts = time.split(':');
    
    if (timeParts.length < 2) return time; // Return as is if not valid
    
    const hours = timeParts[0].padStart(2, '0');
    const minutes = timeParts[1].substring(0, 2).padStart(2, '0');
    
    return `${hours}:${minutes}`;
  } catch (error) {
    console.error('Error formatting time for display:', error);
    return time || '';
  }
}

// API Services with error handling and friendly messages
export const AlunoService = {
  getAlunos: () => api.get('/alunos').catch(error => {
    throw new Error('Erro ao buscar alunos: ' + getErrorMessage(error));
  }),
  
  getAlunoById: (id) => api.get(`/alunos/${id}`).catch(error => {
    throw new Error('Erro ao buscar detalhes do aluno: ' + getErrorMessage(error));
  }),
  
  createAluno: (data) => api.post('/alunos', data).catch(error => {
    throw new Error('Erro ao criar aluno: ' + getErrorMessage(error));
  }),
  
  updateAluno: (id, data) => api.put(`/alunos/${id}`, data).catch(error => {
    throw new Error('Erro ao atualizar aluno: ' + getErrorMessage(error));
  }),
  
  deleteAluno: (id) => api.delete(`/alunos/${id}`).catch(error => {
    throw new Error('Erro ao excluir aluno: ' + getErrorMessage(error));
  }),
  
  getAlunoPresencas: (id) => api.get(`/alunos/${id}/presencas`).catch(error => {
    throw new Error('Erro ao buscar presenças do aluno: ' + getErrorMessage(error));
  })
};

export const OnibusService = {
  getOnibus: () => api.get('/onibus').catch(error => {
    throw new Error('Erro ao buscar ônibus: ' + getErrorMessage(error));
  }),
  
  getOnibusById: (id) => api.get(`/onibus/${id}`).catch(error => {
    throw new Error('Erro ao buscar detalhes do ônibus: ' + getErrorMessage(error));
  }),
  
  createOnibus: (data) => api.post('/onibus', data).catch(error => {
    throw new Error('Erro ao criar ônibus: ' + getErrorMessage(error));
  }),
  
  updateOnibus: (id, data) => api.put(`/onibus/${id}`, data).catch(error => {
    throw new Error('Erro ao atualizar ônibus: ' + getErrorMessage(error));
  }),
  
  deleteOnibus: (id) => api.delete(`/onibus/${id}`).catch(error => {
    throw new Error('Erro ao excluir ônibus: ' + getErrorMessage(error));
  }),
  
  getOnibusViagens: (id) => api.get(`/onibus/${id}/viagens`).catch(error => {
    throw new Error('Erro ao buscar viagens do ônibus: ' + getErrorMessage(error));
  })
};

export const RotaService = {
  getRotas: () => api.get('/rotas').catch(error => {
    throw new Error('Erro ao buscar rotas: ' + getErrorMessage(error));
  }),
  
  getRotaById: (id) => api.get(`/rotas/${id}`).catch(error => {
    throw new Error('Erro ao buscar detalhes da rota: ' + getErrorMessage(error));
  }),
  
  createRota: (data) => {
    // Format time fields
    const formattedData = { ...data };
    if (formattedData.horario_inicio) {
      formattedData.horario_inicio = formatTimeForApi(formattedData.horario_inicio);
    }
    if (formattedData.horario_fim) {
      formattedData.horario_fim = formatTimeForApi(formattedData.horario_fim);
    }
    
    return api.post('/rotas', formattedData).catch(error => {
      throw new Error('Erro ao criar rota: ' + getErrorMessage(error));
    });
  },
  
  updateRota: (id, data) => {
    // Format time fields
    const formattedData = { ...data };
    if (formattedData.horario_inicio) {
      formattedData.horario_inicio = formatTimeForApi(formattedData.horario_inicio);
    }
    if (formattedData.horario_fim) {
      formattedData.horario_fim = formatTimeForApi(formattedData.horario_fim);
    }
    
    return api.put(`/rotas/${id}`, formattedData).catch(error => {
      throw new Error('Erro ao atualizar rota: ' + getErrorMessage(error));
    });
  },
  
  deleteRota: (id) => api.delete(`/rotas/${id}`).catch(error => {
    throw new Error('Erro ao excluir rota: ' + getErrorMessage(error));
  }),
  
  getRotaParadas: (id) => api.get(`/rotas/${id}/paradas`).catch(error => {
    throw new Error('Erro ao buscar paradas da rota: ' + getErrorMessage(error));
  }),
  
  getRotaViagens: (id) => api.get(`/rotas/${id}/viagens`).catch(error => {
    throw new Error('Erro ao buscar viagens da rota: ' + getErrorMessage(error));
  })
};

export const ViagemService = {
  getViagens: () => api.get('/viagens').catch(error => {
    throw new Error('Erro ao buscar viagens: ' + getErrorMessage(error));
  }),
  
  getViagemById: (id) => api.get(`/viagens/${id}`).catch(error => {
    throw new Error('Erro ao buscar detalhes da viagem: ' + getErrorMessage(error));
  }),
  
  createViagem: (data) => {
    // Format time fields for API
    const formattedData = { ...data };
    
    // Handle all time fields
    const timeFields = ['hora_saida_prevista', 'hora_chegada_prevista', 'hora_saida_real', 'hora_chegada_real'];
    timeFields.forEach(field => {
      if (formattedData[field]) {
        formattedData[field] = formatTimeForApi(formattedData[field]);
      }
    });
    
    return api.post('/viagens', formattedData).catch(error => {
      throw new Error('Erro ao criar viagem: ' + getErrorMessage(error));
    });
  },
  
  updateViagem: (id, data) => {
    // Format time fields for API
    const formattedData = { ...data };
    
    // Handle all time fields
    const timeFields = ['hora_saida_prevista', 'hora_chegada_prevista', 'hora_saida_real', 'hora_chegada_real'];
    timeFields.forEach(field => {
      if (formattedData[field]) {
        formattedData[field] = formatTimeForApi(formattedData[field]);
      }
    });
    
    return api.put(`/viagens/${id}`, formattedData).catch(error => {
      throw new Error('Erro ao atualizar viagem: ' + getErrorMessage(error));
    });
  },
  
  deleteViagem: (id) => api.delete(`/viagens/${id}`).catch(error => {
    throw new Error('Erro ao excluir viagem: ' + getErrorMessage(error));
  })
};

export const MonitorService = {
  getMonitores: (page = 1) => api.get('/monitores', { params: { page } }).catch(error => {
    throw new Error('Erro ao buscar monitores: ' + getErrorMessage(error));
  }),
  
  getMonitorById: (id) => api.get(`/monitores/${id}`).catch(error => {
    throw new Error('Erro ao buscar detalhes do monitor: ' + getErrorMessage(error));
  }),
  
  createMonitor: (data) => api.post('/monitores', data).catch(error => {
    throw new Error('Erro ao criar monitor: ' + getErrorMessage(error));
  }),
  
  updateMonitor: (id, data) => api.put(`/monitores/${id}`, data).catch(error => {
    throw new Error('Erro ao atualizar monitor: ' + getErrorMessage(error));
  }),
  
  deleteMonitor: (id) => api.delete(`/monitores/${id}`).catch(error => {
    throw new Error('Erro ao excluir monitor: ' + getErrorMessage(error));
  })
};

export const MotoristaService = {
  getMotoristas: () => api.get('/motoristas').catch(error => {
    throw new Error('Erro ao buscar motoristas: ' + getErrorMessage(error));
  }),
  
  getMotoristaById: (id) => api.get(`/motoristas/${id}`).catch(error => {
    throw new Error('Erro ao buscar detalhes do motorista: ' + getErrorMessage(error));
  }),
  
  createMotorista: (data) => api.post('/motoristas', data).catch(error => {
    throw new Error('Erro ao criar motorista: ' + getErrorMessage(error));
  }),
  
  updateMotorista: (id, data) => api.put(`/motoristas/${id}`, data).catch(error => {
    throw new Error('Erro ao atualizar motorista: ' + getErrorMessage(error));
  }),
  
  deleteMotorista: (id) => api.delete(`/motoristas/${id}`).catch(error => {
    throw new Error('Erro ao excluir motorista: ' + getErrorMessage(error));
  })
};

export default api;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Alunos.jsx ===

import React, { useState, useEffect } from 'react';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';
import FormModal from '../components/common/FormModal';
import { AlunoService } from '../api/services';
import { useNotification } from '../contexts/NotificationContext';

export default function Alunos() {
  const [alunos, setAlunos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentAluno, setCurrentAluno] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { showSuccess, showError } = useNotification ? useNotification() : { 
    showSuccess: () => {}, 
    showError: () => {} 
  };
  
  // Form state
  const [formData, setFormData] = useState({
    nome: '',
    descricao: '',
    data_nascimento: '',
    responsavel: '',
    telefone_responsavel: '',
    endereco: '',
    ponto_referencia: '',
    status: true
  });

  useEffect(() => {
    fetchAlunos();
  }, []);

  const fetchAlunos = async () => {
    try {
      setLoading(true);
      const response = await AlunoService.getAlunos();
      
      // Process the API response
      let alunosData = [];
      
      if (response?.data) {
        // Case 1: Standard response with 'data' inside response.data (common in Laravel)
        if (response.data.data && Array.isArray(response.data.data)) {
          alunosData = response.data.data;
        } 
        // Case 2: Response is a direct array (fallback)
        else if (Array.isArray(response.data)) {
          alunosData = response.data;
        }
        // Case 3: Paginated Laravel response via items()
        else if (response.data.meta && Array.isArray(response.data.data)) {
          alunosData = response.data.data;
        }
        
        // Format data for UI
        const formattedData = alunosData.map(aluno => ({
          ...aluno,
          status: processStatus(aluno.status)
        }));
        
        setAlunos(formattedData);
        setError(null);
      } else {
        // Case 4: No valid data from API
        console.warn('API returned unexpected format');
        setAlunos([]);
        setError('Nenhum dado de aluno encontrado no servidor.');
      }
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Erro ao carregar alunos: ' + (err.response?.data?.message || err.message));
      setAlunos([]);
    } finally {
      setLoading(false);
    }
  };

  // Function to process different status formats
  const processStatus = (status) => {
    if (typeof status === 'boolean') {
      return status ? 'active' : 'inactive';
    } else if (typeof status === 'number') {
      return status === 1 ? 'active' : 'inactive';
    } else if (typeof status === 'string') {
      const lowercaseStatus = status.toLowerCase();
      return lowercaseStatus === 'true' || lowercaseStatus === 'ativo' || lowercaseStatus === '1' 
        ? 'active' : 'inactive';
    } else {
      return 'inactive'; // default value
    }
  };

  // Search and filter function
  const filteredAlunos = alunos.filter(aluno => 
    aluno.nome?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    aluno.responsavel?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    aluno.endereco?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const columns = [
    { key: 'nome', header: 'Nome' },
    { key: 'responsavel', header: 'Responsável' },
    { key: 'endereco', header: 'Endereço' },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => <StatusBadge status={item.status} type="aluno" />
    }
  ];

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  const openModal = (aluno = null) => {
    if (aluno) {
      // Convert status string to boolean for the form
      const statusBool = aluno.status === 'active' || aluno.status === true || aluno.status === 1;
      
      // Set aluno data for editing
      setFormData({
        nome: aluno.nome || '',
        descricao: aluno.descricao || '',
        data_nascimento: aluno.data_nascimento || '',
        responsavel: aluno.responsavel || '',
        telefone_responsavel: aluno.telefone_responsavel || '',
        endereco: aluno.endereco || '',
        ponto_referencia: aluno.ponto_referencia || '',
        status: statusBool
      });
      setCurrentAluno(aluno);
    } else {
      // Reset form for a new aluno
      setFormData({
        nome: '',
        descricao: '',
        data_nascimento: '',
        responsavel: '',
        telefone_responsavel: '',
        endereco: '',
        ponto_referencia: '',
        status: true
      });
      setCurrentAluno(null);
    }
    setIsModalOpen(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      if (currentAluno) {
        // Update
        await AlunoService.updateAluno(currentAluno.id, formData);
        showSuccess('Aluno atualizado com sucesso!');
      } else {
        // Create
        await AlunoService.createAluno(formData);
        showSuccess('Aluno criado com sucesso!');
      }
      setIsModalOpen(false);
      fetchAlunos();
    } catch (err) {
      console.error('Error saving aluno:', err);
      const errorMsg = err.response?.data?.errors ? 
        Object.values(err.response.data.errors).flat().join(', ') : 
        (err.response?.data?.message || err.message);
      
      showError('Erro ao salvar aluno: ' + errorMsg);
      setError('Erro ao salvar aluno: ' + errorMsg);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEdit = (aluno) => {
    openModal(aluno);
  };

  const handleDelete = async (aluno) => {
    if(window.confirm(`Deseja excluir ${aluno.nome}?`)) {
      try {
        await AlunoService.deleteAluno(aluno.id);
        showSuccess('Aluno excluído com sucesso!');
        fetchAlunos();
      } catch (err) {
        const errorMsg = err.response?.data?.message || err.message;
        showError('Erro ao excluir aluno: ' + errorMsg);
        setError('Erro ao excluir aluno: ' + errorMsg);
      }
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-2xl font-bold">Gerenciamento de Alunos</h1>
        <button
          onClick={() => openModal()}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Novo Aluno
        </button>
      </div>

      <div className="bg-white overflow-hidden rounded-lg shadow">
        <div className="px-4 py-3 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 bg-gray-50 border-b">
          <h2 className="font-bold text-lg">Alunos Cadastrados</h2>
          
          {/* Search box */}
          <div className="relative w-full sm:w-64">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Buscar alunos..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        
        <div className="p-4">
          {error && (
            <div className="p-4 mb-4 text-red-600 bg-red-50 rounded-md flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <span>{error}</span>
            </div>
          )}
          
          <DataTable
            columns={columns}
            data={filteredAlunos}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={null} // Error is already shown above
          />
        </div>
      </div>

      {/* Modal Form */}
      <FormModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
        title={currentAluno ? "Editar Aluno" : "Novo Aluno"}
        onSubmit={handleSubmit}
        isSubmitting={isSubmitting}
      >
        <div className="grid grid-cols-1 gap-4 mb-4">
          <div>
            <label htmlFor="nome" className="block text-sm font-medium text-gray-700">Nome</label>
            <input
              type="text"
              name="nome"
              id="nome"
              required
              value={formData.nome}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="responsavel" className="block text-sm font-medium text-gray-700">Responsável</label>
            <input
              type="text"
              name="responsavel"
              id="responsavel"
              required
              value={formData.responsavel}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="telefone_responsavel" className="block text-sm font-medium text-gray-700">Telefone do Responsável</label>
            <input
              type="tel"
              name="telefone_responsavel"
              id="telefone_responsavel"
              required
              value={formData.telefone_responsavel}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="data_nascimento" className="block text-sm font-medium text-gray-700">Data de Nascimento</label>
            <input
              type="date"
              name="data_nascimento"
              id="data_nascimento"
              required
              value={formData.data_nascimento}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="endereco" className="block text-sm font-medium text-gray-700">Endereço</label>
            <input
              type="text"
              name="endereco"
              id="endereco"
              required
              value={formData.endereco}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="ponto_referencia" className="block text-sm font-medium text-gray-700">Ponto de Referência</label>
            <input
              type="text"
              name="ponto_referencia"
              id="ponto_referencia"
              value={formData.ponto_referencia}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="descricao" className="block text-sm font-medium text-gray-700">Descrição</label>
            <textarea
              name="descricao"
              id="descricao"
              rows="3"
              value={formData.descricao}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            ></textarea>
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              name="status"
              id="status"
              checked={formData.status}
              onChange={handleInputChange}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="status" className="ml-2 block text-sm text-gray-900">Ativo</label>
          </div>
        </div>
      </FormModal>

      {/* Quick Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-blue-100 text-blue-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Total de Alunos</div>
            <div className="text-xl font-bold">{alunos.length}</div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-green-100 text-green-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Alunos Ativos</div>
            <div className="text-xl font-bold">
              {alunos.filter(aluno => aluno.status === 'active').length}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Alunos Inativos</div>
            <div className="text-xl font-bold">
              {alunos.filter(aluno => aluno.status === 'inactive').length}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Rotas.jsx ===

import React, { useState, useEffect } from 'react';
import { RotaService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';
import FormModal from '../components/common/FormModal';
import { useNotification } from '../contexts/NotificationContext';

const Rotas = () => {
  const [rotas, setRotas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentRota, setCurrentRota] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const { showSuccess, showError } = useNotification ? useNotification() : { 
    showSuccess: () => {}, 
    showError: () => {} 
  };
  
  // Form state
  const [formData, setFormData] = useState({
    nome: '',
    descricao: '',
    tipo: 'Escolar',
    origem: '',
    destino: '',
    horario_inicio: '',
    horario_fim: '',
    distancia_km: '',
    tempo_estimado_minutos: '',
    status: true
  });

  useEffect(() => {
    fetchRotas();
  }, []);

  const fetchRotas = async () => {
    try {
      setLoading(true);
      const response = await RotaService.getRotas();
      
      if (response?.data?.data && Array.isArray(response.data.data)) {
        // Process data - ensure status is standardized
        const formattedData = response.data.data.map(rota => ({
          ...rota,
          status: convertStatus(rota.status)
        }));
        setRotas(formattedData);
      } else if (Array.isArray(response?.data)) {
        // Alternative API response format
        const formattedData = response.data.map(rota => ({
          ...rota,
          status: convertStatus(rota.status)
        }));
        setRotas(formattedData);
      } else {
        console.error('API returned unexpected data format');
        setError('Formato de dados inesperado. Contate o suporte.');
      }
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Erro ao carregar rotas: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  // Convert various status formats to a standardized format
  const convertStatus = (status) => {
    if (typeof status === 'boolean') {
      return status ? 'active' : 'inactive';
    } else if (typeof status === 'number') {
      return status === 1 ? 'active' : 'inactive';
    } else if (typeof status === 'string') {
      const statusLower = status.toLowerCase();
      if (statusLower === 'true' || statusLower === 'ativo' || statusLower === '1' || statusLower === 'active' || statusLower === 'ativa') {
        return 'active';
      } else if (statusLower === 'false' || statusLower === 'inativo' || statusLower === '0' || statusLower === 'inactive' || statusLower === 'inativa') {
        return 'inactive';
      }
      return status; // Keep original if no match
    }
    return 'inactive'; // Default value
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  const openModal = (rota = null) => {
    if (rota) {
      // Edit mode
      setFormData({
        nome: rota.nome || '',
        descricao: rota.descricao || '',
        tipo: rota.tipo || 'Escolar',
        origem: rota.origem || '',
        destino: rota.destino || '',
        horario_inicio: rota.horario_inicio || '',
        horario_fim: rota.horario_fim || '',
        distancia_km: rota.distancia_km || '',
        tempo_estimado_minutos: rota.tempo_estimado_minutos || '',
        status: rota.status === 'active' || rota.status === true || rota.status === 1
      });
      setCurrentRota(rota);
    } else {
      // Create mode
      setFormData({
        nome: '',
        descricao: '',
        tipo: 'Escolar',
        origem: '',
        destino: '',
        horario_inicio: '',
        horario_fim: '',
        distancia_km: '',
        tempo_estimado_minutos: '',
        status: true
      });
      setCurrentRota(null);
    }
    setIsModalOpen(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // Prepare data for API - converting to expected format
      const apiData = {
        ...formData,
        distancia_km: formData.distancia_km ? parseFloat(formData.distancia_km) : null,
        tempo_estimado_minutos: formData.tempo_estimado_minutos ? parseInt(formData.tempo_estimado_minutos) : null
      };
      
      if (currentRota) {
        // Update
        await RotaService.updateRota(currentRota.id, apiData);
        showSuccess('Rota atualizada com sucesso!');
      } else {
        // Create
        await RotaService.createRota(apiData);
        showSuccess('Rota criada com sucesso!');
      }
      setIsModalOpen(false);
      fetchRotas();
    } catch (err) {
      console.error('Error saving rota:', err);
      const errorMsg = err.response?.data?.message || err.message;
      setError('Erro ao salvar rota: ' + errorMsg);
      showError('Erro ao salvar rota: ' + errorMsg);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Search and filter function
  const filteredRotas = rotas.filter(rota => 
    rota.nome?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    rota.tipo?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    rota.origem?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    rota.destino?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const columns = [
    { key: 'nome', header: 'Nome' },
    { key: 'tipo', header: 'Tipo' },
    { 
      key: 'origem_destino', 
      header: 'Origem / Destino',
      format: (item) => `${item.origem || '-'} → ${item.destino || '-'}`
    },
    { 
      key: 'distancia', 
      header: 'Distância', 
      format: (item) => item.distancia_km ? `${item.distancia_km} km` : '-' 
    },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => <StatusBadge status={item.status} type="rota" />
    }
  ];

  const handleEdit = (rota) => {
    openModal(rota);
  };

  const handleDelete = async (rota) => {
    if(window.confirm(`Deseja excluir a rota ${rota.nome}?`)) {
      try {
        await RotaService.deleteRota(rota.id);
        showSuccess('Rota excluída com sucesso!');
        fetchRotas();
      } catch (err) {
        const errorMsg = err.response?.data?.message || err.message;
        setError('Erro ao excluir rota: ' + errorMsg);
        showError('Erro ao excluir rota: ' + errorMsg);
      }
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Rotas</h1>
        <button 
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center"
          onClick={() => openModal()}
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Nova Rota
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4 flex justify-between items-center">
          <h2 className="font-bold text-lg">Rotas Cadastradas</h2>
          
          {/* Search box */}
          <div className="relative w-full sm:w-64">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Buscar rotas..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        
        <div className="p-4">
          {error && (
            <div className="p-4 mb-4 text-red-600 bg-red-50 rounded-md flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <span>{error}</span>
            </div>
          )}
          
          <DataTable
            columns={columns}
            data={filteredRotas}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={null} // Error is already shown above
          />
        </div>
      </div>
      
      {/* Modal Form */}
      <FormModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
        title={currentRota ? "Editar Rota" : "Nova Rota"}
        onSubmit={handleSubmit}
        isSubmitting={isSubmitting}
      >
        <div className="grid grid-cols-1 gap-4 mb-4">
          <div>
            <label htmlFor="nome" className="block text-sm font-medium text-gray-700">Nome da Rota</label>
            <input
              type="text"
              name="nome"
              id="nome"
              required
              value={formData.nome}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="descricao" className="block text-sm font-medium text-gray-700">Descrição</label>
            <textarea
              name="descricao"
              id="descricao"
              rows="2"
              value={formData.descricao}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            ></textarea>
          </div>
          
          <div>
            <label htmlFor="tipo" className="block text-sm font-medium text-gray-700">Tipo de Rota</label>
            <select
              name="tipo"
              id="tipo"
              required
              value={formData.tipo}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="Escolar">Escolar</option>
              <option value="Regular">Regular</option>
              <option value="Especial">Especial</option>
            </select>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label htmlFor="origem" className="block text-sm font-medium text-gray-700">Origem</label>
              <input
                type="text"
                name="origem"
                id="origem"
                value={formData.origem}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label htmlFor="destino" className="block text-sm font-medium text-gray-700">Destino</label>
              <input
                type="text"
                name="destino"
                id="destino"
                value={formData.destino}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label htmlFor="horario_inicio" className="block text-sm font-medium text-gray-700">Horário de Início</label>
              <input
                type="time"
                name="horario_inicio"
                id="horario_inicio"
                value={formData.horario_inicio}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label htmlFor="horario_fim" className="block text-sm font-medium text-gray-700">Horário de Fim</label>
              <input
                type="time"
                name="horario_fim"
                id="horario_fim"
                value={formData.horario_fim}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label htmlFor="distancia_km" className="block text-sm font-medium text-gray-700">Distância (km)</label>
              <input
                type="number"
                name="distancia_km"
                id="distancia_km"
                min="0"
                step="0.1"
                value={formData.distancia_km}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label htmlFor="tempo_estimado_minutos" className="block text-sm font-medium text-gray-700">Tempo Estimado (minutos)</label>
              <input
                type="number"
                name="tempo_estimado_minutos"
                id="tempo_estimado_minutos"
                min="0"
                value={formData.tempo_estimado_minutos}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              name="status"
              id="status"
              checked={formData.status}
              onChange={handleInputChange}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="status" className="ml-2 block text-sm text-gray-900">Ativa</label>
          </div>
        </div>
      </FormModal>
      
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-blue-100 text-blue-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Total de Rotas</div>
            <div className="text-xl font-bold">{rotas.length}</div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-green-100 text-green-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Rotas Ativas</div>
            <div className="text-xl font-bold">
              {rotas.filter(rota => rota.status === 'active').length}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Rotas Inativas</div>
            <div className="text-xl font-bold">
              {rotas.filter(rota => rota.status === 'inactive').length}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Rotas;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Dashboard.jsx ===

import React, { useEffect } from 'react';
import { Link } from 'react-router-dom';
import { OnibusService, AlunoService, RotaService, ViagemService } from '../api/services';
import { useNotification } from '../contexts/NotificationContext';

export default function Dashboard() {
  const { showError } = useNotification();
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState(null);
  const [stats, setStats] = React.useState({
    onibusAtivos: 0,
    totalAlunos: 0,
    rotasAtivas: 0,
    viagensHoje: 0
  });
  const [viagensData, setViagensData] = React.useState([]);
  const [rotasData, setRotasData] = React.useState([]);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch all data in parallel
      const [onibusResponse, alunosResponse, rotasResponse, viagensResponse] = await Promise.all([
        OnibusService.getOnibus(),
        AlunoService.getAlunos(),
        RotaService.getRotas(),
        ViagemService.getViagens()
      ]);

      // Process onibus data
      const onibusAtivos = onibusResponse.data?.data?.filter(onibus => 
        onibus.status === 'active' || onibus.status === true || onibus.status === 1
      ).length || 0;

      // Process alunos data
      const totalAlunos = alunosResponse.data?.data?.length || 0;

      // console.log('Rotas response:', rotasResponse.data);
      // Process rotas data
      const rotasData = rotasResponse.data?.data || [];
      const rotasAtivas = rotasData.filter(rota => 
        rota.status === 'active' || rota.status === 'ativa' || rota.status === true || rota.status === 1
      ).length;
      
      // console.log('Viagens response:', viagensResponse.data);
      // Process viagens data
      const viagensData = viagensResponse.data?.data || [];
      const today = new Date().toISOString().split('T')[0];
      const viagensHoje = viagensData.filter(viagem => 
        viagem.data_viagem === today
      ).length;

      // Format and enhance data for display
      const formattedRotasData = rotasData.map(rota => ({
        ...rota,
        status: rota.status === true || rota.status === 1 || rota.status === 'active' || rota.status === 'ativa' ? 'Ativa' : 'Inativa'
      }));

      const formattedViagensData = viagensData.map(viagem => {
        const date = new Date(viagem.data_viagem);
        const data_formatada = date.toLocaleDateString('pt-BR', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });
        // Find the corresponding route name
        const rota = rotasData.find(r => r.id === viagem.rota_id);
        return {
          ...viagem,
          data_formatada,
          rota: rota ? rota.nome : 'Rota não encontrada',
          status: viagem.status === true || viagem.status === 1 ? 'Programada' : viagem.status || 'Pendente'
        };
      });

      // Update stats
      setStats({
        onibusAtivos,
        totalAlunos,
        rotasAtivas,
        viagensHoje
      });

      // Update tables data with formatted data
      setRotasData(formattedRotasData.slice(0, 3));
      setViagensData(formattedViagensData.slice(0, 3));
      
      //console.log('Formatted rotas data:', formattedRotasData);
      //console.log('Formatted viagens data:', formattedViagensData);

    } catch (err) {
      console.error('Error fetching dashboard data:', err);
      const errorMessage = 'Erro ao carregar dados do dashboard: ' + (err.response?.data?.message || err.message);
      setError(errorMessage);
      showError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
        <p className="text-red-700">{error}</p>
      </div>
    );
  }

  return (
    <div>
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-2">Dashboard</h1>
        <p className="text-gray-600">Bem-vindo ao sistema de transporte Coracao. Acompanhe as principais informações do sistema.</p>
      </div>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        {/* Ônibus Ativos */}
        <div className="bg-white p-6 border-b border-r border-gray-200">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.onibusAtivos}</div>
              <div className="text-gray-500 mt-1">Ônibus Ativos</div>
            </div>
            <div className="bg-blue-100 text-blue-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12" />
              </svg>
            </div>
          </div>
        </div>
        
        {/* Alunos Cadastrados */}
        <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 transition-all hover:shadow-md">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.totalAlunos}</div>
              <div className="text-gray-500 mt-1">Alunos Cadastrados</div>
            </div>
            <div className="bg-green-100 text-green-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m.94 3.198.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0 1 12 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 0 1 6 18.719m12 0a5.971 5.971 0 0 0-.941-3.197m0 0A5.995 5.995 0 0 0 12 12.75a5.995 5.995 0 0 0-5.058 2.772m0 0a3 3 0 0 0-4.681 2.72 8.986 8.986 0 0 0 3.74.477m.94-3.197a5.971 5.971 0 0 0-.94 3.197M15 6.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm6 3a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm-13.5 0a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z" />
              </svg>
            </div>
          </div>
        </div>
        
        {/* Rotas Ativas */}
        <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 transition-all hover:shadow-md">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.rotasAtivas}</div>
              <div className="text-gray-500 mt-1">Rotas Ativas</div>
            </div>
            <div className="bg-purple-100 text-purple-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 6.75V15m6-6v8.25m.503 3.498l4.875-2.437c.381-.19.622-.58.622-1.006V4.82c0-.836-.88-1.38-1.628-1.006l-3.869 1.934c-.317.159-.69.159-1.006 0L9.503 3.252a1.125 1.125 0 00-1.006 0L3.622 5.689C3.24 5.88 3 6.27 3 6.695V19.18c0 .836.88 1.38 1.628 1.006l3.869-1.934c.317-.159.69-.159 1.006 0l4.994 2.497c.317.158.69.158 1.006 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        {/* Viagens Programadas */}
        <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 transition-all hover:shadow-md">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.viagensHoje}</div>
              <div className="text-gray-500 mt-1">Viagens Programadas</div>
            </div>
            <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
              </svg>
            </div>
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        {/* Próximas Viagens */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
          <div className="border-b px-6 py-4 flex justify-between items-center">
            <h2 className="font-bold text-lg">Próximas Viagens</h2>
            <Link to="/viagens" className="text-blue-600 hover:text-blue-800 text-sm flex items-center">
              Ver todas
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
              </svg>
            </Link>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="text-left bg-gray-50">
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Data</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Rota</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {viagensData.map((viagem, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="py-3 px-4 whitespace-nowrap">{viagem.data_formatada}</td>
                    <td className="py-3 px-4">{viagem.rota}</td>
                    <td className="py-3 px-4">
                      <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${viagem.status === 'Programada' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                        {viagem.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          {/* Mobile view for Próximas Viagens */}
          <div className="md:hidden px-4 pb-4 pt-2">
            <div className="text-sm text-gray-500 mb-2 font-medium">Visualização mobile</div>
            {viagensData.map((viagem, index) => (
              <div key={index} className="mb-3 bg-gray-50 p-3 rounded-lg">
                <div className="font-medium mb-1">{viagem.rota}</div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Data:</span>
                  <span>{viagem.data_formatada}</span>
                </div>
                <div className="flex justify-between text-sm mt-1">
                  <span className="text-gray-500">Status:</span>
                  <span className={`px-2 py-0.5 text-xs leading-5 font-semibold rounded-full ${viagem.status === 'Programada' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                    {viagem.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* Rotas Ativas */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
          <div className="border-b px-6 py-4 flex justify-between items-center">
            <h2 className="font-bold text-lg">Rotas Ativas</h2>
            <Link to="/rotas" className="text-blue-600 hover:text-blue-800 text-sm flex items-center">
              Ver todas
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
              </svg>
            </Link>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="text-left bg-gray-50">
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Nome</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {rotasData.map((rota, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="py-3 px-4">{rota.nome}</td>
                    <td className="py-3 px-4">{rota.tipo}</td>
                    <td className="py-3 px-4">
                      <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${rota.status === 'Ativa' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                        {rota.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          {/* Mobile view for Rotas Ativas */}
          <div className="md:hidden px-4 pb-4 pt-2">
            <div className="text-sm text-gray-500 mb-2 font-medium">Visualização mobile</div>
            {rotasData.map((rota, index) => (
              <div key={index} className="mb-3 bg-gray-50 p-3 rounded-lg">
                <div className="font-medium mb-1">{rota.nome}</div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Tipo:</span>
                  <span>{rota.tipo}</span>
                </div>
                <div className="flex justify-between text-sm mt-1">
                  <span className="text-gray-500">Status:</span>
                  <span className="px-2 py-0.5 text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    {rota.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Login.jsx ===

import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'

export default function Login() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const navigate = useNavigate()

  const handleSubmit = (e) => {
    e.preventDefault()
    setLoading(true)
    
    // Simulate API request with a delay
    setTimeout(() => {
      if(username === 'admin' && password === 'admin') {
        navigate('/dashboard')
      } else {
        setError('Credenciais inválidas. Use admin/admin')
        setLoading(false)
      }
    }, 800)
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      {/* Left side - Login Form */}
      <div className="flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8 w-full md:w-1/2">
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <h1 className="text-center text-3xl font-bold text-gray-900 mb-1">Coracao</h1>
          <h2 className="text-center text-xl font-semibold text-gray-900">Login</h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Sistema de Gerenciamento de Transporte
          </p>
        </div>

        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
          <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div>
                <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                  Nome de usuário
                </label>
                <div className="mt-1">
                  <input
                    id="username"
                    name="username"
                    type="text"
                    autoComplete="username"
                    required
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Digite seu nome de usuário"
                  />
                </div>
              </div>

              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Senha
                </label>
                <div className="mt-1">
                  <input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="current-password"
                    required
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Digite sua senha"
                  />
                </div>
              </div>

              {error && (
                <div className="bg-red-50 border-l-4 border-red-500 p-4 text-sm text-red-700">
                  <div className="flex items-center">
                    <svg className="h-5 w-5 text-red-500 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    {error}
                  </div>
                </div>
              )}

              <div>
                <button
                  type="submit"
                  disabled={loading}
                  className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                    loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}
                >
                  {loading ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Entrando...
                    </>
                  ) : 'Entrar'}
                </button>
              </div>
            </form>
            
            <div className="mt-6 bg-gray-50 p-4 rounded border border-gray-200 text-sm">
              <p className="font-medium mb-2">Para demonstração, use:</p>
              <p><span className="text-gray-500">Usuário:</span> <strong>admin</strong></p>
              <p><span className="text-gray-500">Senha:</span> <strong>admin</strong></p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Right side - Banner Image (only visible on md screens and up) */}
      <div className="hidden md:block md:w-1/2 bg-blue-600">
        <div className="h-full flex items-center justify-center p-8 text-white">
          <div className="max-w-lg">
            <h2 className="text-3xl font-bold mb-4">Sistema de Gerenciamento de Transporte Escolar</h2>
            <p className="text-lg text-blue-100 mb-6">
              Uma plataforma completa para gerenciar ônibus, rotas e alunos com eficiência e segurança.
            </p>
            <div className="space-y-4">
              <div className="flex items-center">
                <svg className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>Gerenciamento de frota escolar</span>
              </div>
              <div className="flex items-center">
                <svg className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>Controle de rotas e viagens</span>
              </div>
              <div className="flex items-center">
                <svg className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>Cadastro e acompanhamento de alunos</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Monitores.jsx ===

import React, { useState, useEffect } from 'react';
import DataTable from '../components/common/DataTable';
import { MonitorService } from '../api/services';
import { useNotification } from '../contexts/NotificationContext';

export const Monitores = () => {
  const [monitores, setMonitores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pagination, setPagination] = useState({
    currentPage: 1,
    totalPages: 1,
    perPage: 10,
    totalItems: 0
  });
  const { showNotification } = useNotification();

  const columns = [
    { key: 'id', header: 'ID' },
    { key: 'nome', header: 'Nome' },
    { key: 'email', header: 'Email' },
    { key: 'telefone', header: 'Telefone' },
    { key: 'disponivel', header: 'Disponível', format: (item) => item.disponivel ? 'Sim' : 'Não' },
    { key: 'actions', header: 'Ações' }
  ];

  const fetchMonitores = async (page = 1) => {
    try {
      setLoading(true);
      const response = await MonitorService.getMonitores(page);
      const { data, meta } = response.data;
      setMonitores(data);
      setPagination({
        currentPage: meta.current_page,
        totalPages: meta.last_page,
        perPage: meta.per_page,
        totalItems: meta.total
      });
    } catch (error) {
      console.error('Error fetching monitores:', error);
      showNotification('error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchMonitores();
  }, []);

  const handlePageChange = (newPage) => {
    fetchMonitores(newPage);
  };

  const handleCreate = async (formData) => {
    try {
      await MonitorService.createMonitor(formData);
      showNotification('success', 'Monitor criado com sucesso');
      fetchMonitores();
    } catch (error) {
      showNotification('error', error.message);
    }
  };

  const handleUpdate = async (id, formData) => {
    try {
      await MonitorService.updateMonitor(id, formData);
      showNotification('success', 'Monitor atualizado com sucesso');
      fetchMonitores(pagination.currentPage);
    } catch (error) {
      showNotification('error', error.message);
    }
  };

  const handleDelete = async (id) => {
    try {
      await MonitorService.deleteMonitor(id);
      showNotification('success', 'Monitor removido com sucesso');
      fetchMonitores(pagination.currentPage);
    } catch (error) {
      showNotification('error', error.message);
    }
  };

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Gerenciamento de Monitores</h1>
      <DataTable
        columns={columns}
        data={monitores}
        loading={loading}
        pagination={pagination}
        onPageChange={handlePageChange}
        onCreate={handleCreate}
        onUpdate={handleUpdate}
        onDelete={handleDelete}
        searchPlaceholder="Buscar monitores..."
      />
    </div>
  );
};

export default Monitores;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Viagens.jsx ===

import React, { useState, useEffect } from 'react';
import { ViagemService, RotaService, OnibusService, MotoristaService, MonitorService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';
import FormModal from '../components/common/FormModal';
import { useNotification } from '../contexts/NotificationContext';

const Viagens = () => {
  const { showError, showSuccess } = useNotification();

  const [viagens, setViagens] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentViagem, setCurrentViagem] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  // Related data for dropdown selects
  const [rotas, setRotas] = useState([]);
  const [onibus, setOnibus] = useState([]);
  const [motoristas, setMotoristas] = useState([]);
  const [monitores, setMonitores] = useState([]);
  const [relatedDataLoading, setRelatedDataLoading] = useState(false);

  // Form state
  const [formData, setFormData] = useState({
    data_viagem: '',
    rota_id: '',
    onibus_id: '',
    motorista_id: '',
    monitor_id: '',
    horario_id: '1', // Default value, will be replaced with actual data
    hora_saida_prevista: '',
    hora_chegada_prevista: '',
    hora_saida_real: '',
    hora_chegada_real: '',
    observacoes: '',
    status: true
  });

  useEffect(() => {
    fetchViagens();
    fetchRelatedData();
  }, []);

  const fetchViagens = async () => {
    try {
      setLoading(true);
      const response = await ViagemService.getViagens();

      if (response?.data?.data && Array.isArray(response.data.data)) {
        // Convert status to match UI requirements
        const formattedData = response.data.data.map(viagem => ({
          ...viagem,
          status: viagem.status ? 'completed' : 'pending'
        }));
        setViagens(formattedData);
      } else {
        console.error('API returned unexpected data format');
        showError('Formato de dados inesperado. Contate o suporte.');
      }
    } catch (err) {
      console.error('Error fetching data:', err);
      showError('Erro ao carregar viagens: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const fetchRelatedData = async () => {
    setRelatedDataLoading(true);
    try {
      // Fetch related data for dropdowns
      const [rotasRes, onibusRes, motoristasRes, monitoresRes] = await Promise.all([
        RotaService.getRotas(),
        OnibusService.getOnibus(),
        MotoristaService.getMotoristas(),
        MonitorService.getMonitores()
      ]);

      setRotas(rotasRes.data.data || []);
      setOnibus(onibusRes.data.data || []);
      setMotoristas(motoristasRes.data.data || []);
      setMonitores(monitoresRes.data.data || []);
    } catch (err) {
      console.error('Error fetching related data:', err);
      showError('Erro ao carregar dados relacionados: ' + err.message);
    } finally {
      setRelatedDataLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  const openModal = (viagem = null) => {
    if (viagem) {
      // Edit mode
      const data = {
        data_viagem: viagem.data_viagem || '',
        rota_id: viagem.rota_id || '',
        onibus_id: viagem.onibus_id || '',
        motorista_id: viagem.motorista_id || '',
        monitor_id: viagem.monitor_id || '',
        horario_id: viagem.horario_id || '1',
        hora_saida_prevista: viagem.hora_saida_prevista ? formatTimeForDisplay(viagem.hora_saida_prevista) : '',
        hora_chegada_prevista: viagem.hora_chegada_prevista ? formatTimeForDisplay(viagem.hora_chegada_prevista) : '',
        hora_saida_real: viagem.hora_saida_real ? formatTimeForDisplay(viagem.hora_saida_real) : '',
        hora_chegada_real: viagem.hora_chegada_real ? formatTimeForDisplay(viagem.hora_chegada_real) : '',
        observacoes: viagem.observacoes || '',
        status: viagem.status === 'completed' || viagem.status === true || viagem.status === 1
      };
      setFormData(data);
      setCurrentViagem(viagem);
    } else {
      // Create mode - set default values
      const today = new Date().toISOString().split('T')[0];
      setFormData({
        data_viagem: today,
        rota_id: '',
        onibus_id: '',
        motorista_id: '',
        monitor_id: '',
        horario_id: '1', // Default value
        hora_saida_prevista: '07:00',
        hora_chegada_prevista: '08:00',
        hora_saida_real: '',
        hora_chegada_real: '',
        observacoes: '',
        status: true
      });
      setCurrentViagem(null);
    }
    setIsModalOpen(true);
  };

  // Format time values from API format (H:i) to HTML time input format (HH:mm)
  const formatTimeForDisplay = (time) => {
    if (!time) return '';
    
    try {
      // Handle different time formats that might come from the API
      const timeParts = time.split(':');
      
      if (timeParts.length < 2) return time; // Return as is if not a valid time format
      
      const hours = timeParts[0].padStart(2, '0');
      const minutes = timeParts[1].substring(0, 2).padStart(2, '0'); // Take only first 2 chars & ensure 2 digits
      
      return `${hours}:${minutes}`;
    } catch (error) {
      console.error('Error formatting time for display:', error);
      return time || '';
    }
  };

  // Format time values from HTML time input format (HH:mm) to API format (H:i)
  const formatTimeForApi = (time) => {
    if (!time) return '';
    
    try {
      // Extract hours and minutes
      const [hours, minutes] = time.split(':');
      
      // Convert hours to integer to remove leading zeros
      const hour = parseInt(hours, 10);
      
      // Return exactly in the format expected by the API (H:i)
      return `${hour}:${minutes}`;
    } catch (error) {
      console.error('Error formatting time for API:', error);
      return '';
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // Format the data for API
      const apiData = {
        ...formData,
        hora_saida_prevista: formData.hora_saida_prevista,
        hora_chegada_prevista: formData.hora_chegada_prevista,
        hora_saida_real: formData.hora_saida_real || null,
        hora_chegada_real: formData.hora_chegada_real || null,
        status: formData.status
      };

      if (currentViagem) {
        // Update
        await ViagemService.updateViagem(currentViagem.id, apiData);
        showSuccess('Viagem atualizada com sucesso!');
      } else {
        // Create
        await ViagemService.createViagem(apiData);
        showSuccess('Viagem criada com sucesso!');
      }
      setIsModalOpen(false);
      fetchViagens();
    } catch (err) {
      console.error('Error saving viagem:', err);

      if (err.response && err.response.status === 422) {
        const validationErrors = err.response.data.errors;
        if (validationErrors) {
          const errorMessages = Object.entries(validationErrors)
            .map(([field, messages]) => `${field}: ${messages.join(', ')}`)
            .join('\n');

          showError(`Erro de validação:\n${errorMessages}`);
        }
      } else {
        showError('Erro ao salvar viagem: ' + (err.response?.data?.message || err.message));
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Get the name of a linked entity based on its ID
  const getRotaName = (id) => {
    const rota = rotas.find(r => r.id === id);
    return rota ? rota.nome : 'Desconhecida';
  };

  const getOnibusName = (id) => {
    const bus = onibus.find(o => o.id === id);
    return bus ? bus.placa : 'Desconhecido';
  };

  const getMotoristaName = (id) => {
    const motorista = motoristas.find(m => m.id === id);
    return motorista ? motorista.nome : 'Desconhecido';
  };

  // Format a date from ISO to local date format
  const formatDate = (dateString) => {
    if (!dateString) return '-';
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR');
  };

  // Format nested object or use ID to lookup name
  const formatNestedName = (item, field, nameFn) => {
    if (item[field] && typeof item[field] === 'object') {
      return item[field].nome || item[field].placa || 'Desconhecido';
    }
    return nameFn(item[`${field}_id`]);
  };

  const columns = [
    {
      key: 'data_viagem',
      header: 'Data',
      format: (item) => formatDate(item.data_viagem)
    },
    {
      key: 'rota',
      header: 'Rota',
      format: (item) => formatNestedName(item, 'rota', getRotaName)
    },
    {
      key: 'onibus',
      header: 'Ônibus',
      format: (item) => formatNestedName(item, 'onibus', getOnibusName)
    },
    {
      key: 'motorista',
      header: 'Motorista',
      format: (item) => formatNestedName(item, 'motorista', getMotoristaName)
    },
    {
      key: 'status',
      header: 'Status',
      format: (item) => <StatusBadge status={item.status} type="viagem" />
    }
  ];

  const handleEdit = (viagem) => {
    openModal(viagem);
  };

  const handleDelete = async (viagem) => {
    if (window.confirm(`Deseja excluir a viagem de ${formatDate(viagem.data_viagem)}?`)) {
      try {
        await ViagemService.deleteViagem(viagem.id);
        showSuccess('Viagem excluída com sucesso!');
        fetchViagens();
      } catch (err) {
        showError('Erro ao excluir viagem: ' + (err.response?.data?.message || err.message));
      }
    }
  };

  const filteredViagens = viagens.filter(viagem => {
    const searchLower = searchTerm.toLowerCase();
    return (
      viagem.data_viagem.toLowerCase().includes(searchLower) ||
      formatNestedName(viagem, 'rota', getRotaName).toLowerCase().includes(searchLower) ||
      formatNestedName(viagem, 'onibus', getOnibusName).toLowerCase().includes(searchLower) ||
      formatNestedName(viagem, 'motorista', getMotoristaName).toLowerCase().includes(searchLower)
    );
  });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Viagens</h1>
        <button
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center"
          onClick={() => openModal()}
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Nova Viagem
        </button>
      </div>

      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4 flex justify-between items-center">
          <h2 className="font-bold text-lg">Viagens Programadas</h2>

          {/* Search box */}
          <div className="relative w-full sm:w-64">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Buscar viagens..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        <div className="p-4">
          {error && (
            <div className="p-4 mb-4 text-red-600 bg-red-50 rounded-md flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <span>{error}</span>
            </div>
          )}

          <DataTable
            columns={columns}
            data={filteredViagens}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={null} // Error is already shown above
          />
        </div>
      </div>

      {/* Modal Form */}
      <FormModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={currentViagem ? "Editar Viagem" : "Nova Viagem"}
        onSubmit={handleSubmit}
        isSubmitting={isSubmitting}
      >
        <div className="grid grid-cols-1 gap-4 mb-4">
          <div>
            <label htmlFor="data_viagem" className="block text-sm font-medium text-gray-700">Data da Viagem</label>
            <input
              type="date"
              name="data_viagem"
              id="data_viagem"
              required
              value={formData.data_viagem}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          <div>
            <label htmlFor="rota_id" className="block text-sm font-medium text-gray-700">Rota</label>
            <select
              name="rota_id"
              id="rota_id"
              required
              value={formData.rota_id}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              disabled={relatedDataLoading}
            >
              <option value="">Selecione uma rota</option>
              {rotas.map(rota => (
                <option key={rota.id} value={rota.id}>{rota.nome}</option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="onibus_id" className="block text-sm font-medium text-gray-700">Ônibus</label>
            <select
              name="onibus_id"
              id="onibus_id"
              required
              value={formData.onibus_id}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              disabled={relatedDataLoading}
            >
              <option value="">Selecione um ônibus</option>
              {onibus.map(bus => (
                <option key={bus.id} value={bus.id}>{bus.placa} - {bus.modelo}</option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="motorista_id" className="block text-sm font-medium text-gray-700">Motorista</label>
            <select
              name="motorista_id"
              id="motorista_id"
              required
              value={formData.motorista_id}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              disabled={relatedDataLoading}
            >
              <option value="">Selecione um motorista</option>
              {motoristas.map(motorista => (
                <option key={motorista.id} value={motorista.id}>{motorista.nome}</option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="monitor_id" className="block text-sm font-medium text-gray-700">Monitor (opcional)</label>
            <select
              name="monitor_id"
              id="monitor_id"
              value={formData.monitor_id}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              disabled={relatedDataLoading}
            >
              <option value="">Nenhum monitor</option>
              {monitores.map(monitor => (
                <option key={monitor.id} value={monitor.id}>{monitor.nome}</option>
              ))}
            </select>
          </div>

          {/* Hidden field for horario_id - required by API but handled separately */}
          <input type="hidden" name="horario_id" value={formData.horario_id} />

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label htmlFor="hora_saida_prevista" className="block text-sm font-medium text-gray-700">Hora Saída Prevista</label>
              <input
                type="time"
                name="hora_saida_prevista"
                id="hora_saida_prevista"
                required
                value={formData.hora_saida_prevista}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label htmlFor="hora_chegada_prevista" className="block text-sm font-medium text-gray-700">Hora Chegada Prevista</label>
              <input
                type="time"
                name="hora_chegada_prevista"
                id="hora_chegada_prevista"
                required
                value={formData.hora_chegada_prevista}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label htmlFor="hora_saida_real" className="block text-sm font-medium text-gray-700">Hora Saída Real</label>
              <input
                type="time"
                name="hora_saida_real"
                id="hora_saida_real"
                value={formData.hora_saida_real}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label htmlFor="hora_chegada_real" className="block text-sm font-medium text-gray-700">Hora Chegada Real</label>
              <input
                type="time"
                name="hora_chegada_real"
                id="hora_chegada_real"
                value={formData.hora_chegada_real}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <div>
            <label htmlFor="observacoes" className="block text-sm font-medium text-gray-700">Observações</label>
            <textarea
              name="observacoes"
              id="observacoes"
              rows="2"
              value={formData.observacoes}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            ></textarea>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              name="status"
              id="status"
              checked={formData.status}
              onChange={handleInputChange}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="status" className="ml-2 block text-sm text-gray-900">Ativa</label>
          </div>
        </div>
      </FormModal>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-blue-100 text-blue-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Total de Viagens</div>
            <div className="text-xl font-bold">{viagens.length}</div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-green-100 text-green-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Viagens Concluídas</div>
            <div className="text-xl font-bold">
              {viagens.filter(viagem => viagem.status === 'completed').length}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Viagens Pendentes</div>
            <div className="text-xl font-bold">
              {viagens.filter(viagem => viagem.status === 'pending').length}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Viagens;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/PageHeader.jsx ===

import React from 'react';

export default function PageHeader({ 
  title, 
  description,
  actionButton = null 
}) {
  return (
    <div className="bg-blue-50 flex flex-col sm:flex-row 2xl:flex-row justify-between items-start sm:items-center xl:items-center gap-4 mb-4 sm:mb-6 xl:mb-8 2xl:mb-10">
      <div>
        <h1 className="text-2xl sm:text-3xl xl:text-4xl 2xl:text-5xl font-bold">{title}</h1>
        {description && <p className="text-gray-600 mt-1 sm:mt-1.5 xl:mt-2 text-sm sm:text-base xl:text-lg 2xl:text-xl">{description}</p>}
      </div>
      
      {actionButton && (
        <div className="self-stretch sm:self-auto">
          {actionButton}
        </div>
      )}
    </div>
  );
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Onibus.jsx ===

// src/pages/Onibus.jsx
import React, { useState, useEffect } from 'react';
import { OnibusService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';
import FormModal from '../components/common/FormModal';
import { useNotification } from '../contexts/NotificationContext';

const Onibus = () => {
  const [onibus, setOnibus] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentOnibus, setCurrentOnibus] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const { showSuccess, showError } = useNotification ? useNotification() : { 
    showSuccess: () => {}, 
    showError: () => {} 
  };
  
  // Form state
  const [formData, setFormData] = useState({
    placa: '',
    modelo: '',
    capacidade: '',
    ano_fabricacao: '',
    status: true
  });

  useEffect(() => {
    fetchOnibus();
  }, []);

  const fetchOnibus = async () => {
    try {
      setLoading(true);
      const response = await OnibusService.getOnibus();
      
      if (response?.data?.data && Array.isArray(response.data.data)) {
        // Process data - ensure status is standardized
        const formattedData = response.data.data.map(bus => ({
          ...bus,
          status: convertStatus(bus.status)
        }));
        setOnibus(formattedData);
      } else if (Array.isArray(response?.data)) {
        // Alternative API response format
        const formattedData = response.data.map(bus => ({
          ...bus,
          status: convertStatus(bus.status)
        }));
        setOnibus(formattedData);
      } else {
        console.error('API returned unexpected data format');
        setError('Formato de dados inesperado. Contate o suporte.');
      }
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Erro ao carregar ônibus: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  // Convert various status formats to a standardized format
  const convertStatus = (status) => {
    if (typeof status === 'boolean') {
      return status ? 'active' : 'inactive';
    } else if (typeof status === 'number') {
      return status === 1 ? 'active' : 'inactive';
    } else if (typeof status === 'string') {
      const statusLower = status.toLowerCase();
      if (statusLower === 'true' || statusLower === 'ativo' || statusLower === '1' || statusLower === 'active') {
        return 'active';
      } else if (statusLower === 'false' || statusLower === 'inativo' || statusLower === '0' || statusLower === 'inactive') {
        return 'inactive';
      } else if (statusLower === 'manutenção' || statusLower === 'manutencao' || statusLower === 'em manutenção' || statusLower === 'em manutencao') {
        return 'maintenance';
      }
      return status; // Keep original if no match
    }
    return 'inactive'; // Default value
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  const openModal = (bus = null) => {
    if (bus) {
      // Edit mode
      setFormData({
        placa: bus.placa || '',
        modelo: bus.modelo || '',
        capacidade: bus.capacidade || '',
        ano_fabricacao: bus.ano_fabricacao || '',
        status: bus.status === 'active' || bus.status === true || bus.status === 1
      });
      setCurrentOnibus(bus);
    } else {
      // Create mode
      setFormData({
        placa: '',
        modelo: '',
        capacidade: '',
        ano_fabricacao: new Date().getFullYear(),
        status: true
      });
      setCurrentOnibus(null);
    }
    setIsModalOpen(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // Prepare data for API - converting to expected format
      const apiData = {
        ...formData,
        capacidade: parseInt(formData.capacidade),
        ano_fabricacao: parseInt(formData.ano_fabricacao)
      };
      
      if (currentOnibus) {
        // Update
        await OnibusService.updateOnibus(currentOnibus.id, apiData);
        showSuccess('Ônibus atualizado com sucesso!');
      } else {
        // Create
        await OnibusService.createOnibus(apiData);
        showSuccess('Ônibus cadastrado com sucesso!');
      }
      setIsModalOpen(false);
      fetchOnibus();
    } catch (err) {
      console.error('Error saving onibus:', err);
      const errorMsg = err.response?.data?.message || err.message;
      setError('Erro ao salvar ônibus: ' + errorMsg);
      showError('Erro ao salvar ônibus: ' + errorMsg);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Search and filter function
  const filteredOnibus = onibus.filter(bus => 
    bus.placa?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    bus.modelo?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const columns = [
    { key: 'placa', header: 'Placa' },
    { key: 'modelo', header: 'Modelo' },
    { key: 'ano_fabricacao', header: 'Ano' },
    { key: 'capacidade', header: 'Capacidade', format: (item) => `${item.capacidade} passageiros` },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => <StatusBadge status={item.status} type="onibus" />
    }
  ];

  const handleEdit = (bus) => {
    openModal(bus);
  };

  const handleDelete = async (bus) => {
    if(window.confirm(`Deseja excluir o ônibus de placa ${bus.placa}?`)) {
      try {
        await OnibusService.deleteOnibus(bus.id);
        showSuccess('Ônibus excluído com sucesso!');
        fetchOnibus();
      } catch (err) {
        const errorMsg = err.response?.data?.message || err.message;
        setError('Erro ao excluir ônibus: ' + errorMsg);
        showError('Erro ao excluir ônibus: ' + errorMsg);
      }
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Ônibus</h1>
        <button 
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center"
          onClick={() => openModal()}
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Novo Ônibus
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4 flex justify-between items-center">
          <h2 className="font-bold text-lg">Frota de Ônibus</h2>
          
          {/* Search box */}
          <div className="relative w-full sm:w-64">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Buscar ônibus..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        
        <div className="p-4">
          {error && (
            <div className="p-4 mb-4 text-red-600 bg-red-50 rounded-md flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <span>{error}</span>
            </div>
          )}
          
          <DataTable
            columns={columns}
            data={filteredOnibus}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={null} // Error is already shown above
          />
        </div>
      </div>
      
      {/* Modal Form */}
      <FormModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
        title={currentOnibus ? "Editar Ônibus" : "Novo Ônibus"}
        onSubmit={handleSubmit}
        isSubmitting={isSubmitting}
      >
        <div className="grid grid-cols-1 gap-4 mb-4">
          <div>
            <label htmlFor="placa" className="block text-sm font-medium text-gray-700">Placa</label>
            <input
              type="text"
              name="placa"
              id="placa"
              required
              value={formData.placa}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="modelo" className="block text-sm font-medium text-gray-700">Modelo</label>
            <input
              type="text"
              name="modelo"
              id="modelo"
              required
              value={formData.modelo}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="capacidade" className="block text-sm font-medium text-gray-700">Capacidade</label>
            <input
              type="number"
              name="capacidade"
              id="capacidade"
              required
              min="1"
              value={formData.capacidade}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label htmlFor="ano_fabricacao" className="block text-sm font-medium text-gray-700">Ano de Fabricação</label>
            <input
              type="number"
              name="ano_fabricacao"
              id="ano_fabricacao"
              required
              min="1990"
              max={new Date().getFullYear()}
              value={formData.ano_fabricacao}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              name="status"
              id="status"
              checked={formData.status}
              onChange={handleInputChange}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="status" className="ml-2 block text-sm text-gray-900">Ativo</label>
          </div>
        </div>
      </FormModal>
      
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-blue-100 text-blue-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Total de Ônibus</div>
            <div className="text-xl font-bold">{onibus.length}</div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-green-100 text-green-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Ônibus Ativos</div>
            <div className="text-xl font-bold">
              {onibus.filter(bus => bus.status === 'active').length}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Ônibus Inativos</div>
            <div className="text-xl font-bold">
              {onibus.filter(bus => bus.status === 'inactive' || bus.status === 'maintenance').length}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Onibus;
=== /Users/micaelsantana/Documents/app-frontend/package.json ===

{
  "type": "module",
  "name": "transporte-escolar-frontend",
  "private": true,
  "version": "0.1.0",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.1",
    "axios": "^1.6.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.55.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "vite": "^5.0.0"
  }
}

=== /Users/micaelsantana/Documents/app-frontend/tailwind.config.cjs ===

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {
        screens: {
          '3xl': '1920px',
          '4xl': '2560px'
        },
        colors: {
          primary: '#1e40af',
          secondary: '#1d4ed8',
          success: '#16a34a',
          danger: '#dc2626'
        }
      },
    },
    plugins: [],
    safelist: [
      // Add dynamic classes that might be purged
      'bg-blue-100',
      'text-blue-500',
      'bg-green-100',
      'text-green-500',
      'bg-purple-100',
      'text-purple-500',
      'bg-yellow-100',
      'text-yellow-800',
      'bg-red-100',
      'text-red-800',
    ]
  }
=== /Users/micaelsantana/Documents/app-frontend/postcss.config.cjs ===

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
=== /Users/micaelsantana/Documents/app-frontend/vite.config.js ===

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false
      }
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  },
  resolve: {
    alias: {
      '@': '/src'
    }
  }
})