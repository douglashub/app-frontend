
=== /Users/micaelsantana/Documents/app-frontend/src/index.css ===

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-50;
}

.primary {
  @apply text-blue-600;
}

.secondary {
  @apply text-green-600;
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/DataTable.jsx ===

import React from 'react'
import StatusBadge from './StatusBadge'

export default function DataTable({ 
  columns, 
  data = [], // Add default empty array
  onEdit, 
  onDelete,
  loading,
  error
}) {
  // Ensure data is always an array
  const safeData = Array.isArray(data) ? data : [];
  
  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
      {loading && (
        <div className="p-4 text-gray-500">Carregando...</div>
      )}

      {error && (
        <div className="p-4 text-red-600">{error}</div>
      )}

      {!loading && !error && (
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="text-left text-sm text-gray-500 border-b">
                {columns.map((col) => (
                  <th key={col.key} className="pb-3 px-4">{col.header}</th>
                ))}
                <th className="pb-3 px-4">Ações</th>
              </tr>
            </thead>
            <tbody>
              {safeData.length === 0 ? (
                <tr>
                  <td colSpan={columns.length + 1} className="py-4 px-4 text-center text-gray-500">
                    Nenhum registro encontrado
                  </td>
                </tr>
              ) : (
                safeData.map((item) => (
                  <tr key={item.id} className="border-b hover:bg-gray-50">
                    {columns.map((col) => (
                      <td key={col.key} className="py-3 px-4">
                        {col.format ? col.format(item) : item[col.key]}
                      </td>
                    ))}
                    <td className="py-3 px-4 space-x-2">
                      <button
                        onClick={() => onEdit(item)}
                        className="text-primary hover:text-secondary"
                      >
                        Editar
                      </button>
                      <button
                        onClick={() => onDelete(item)}
                        className="text-red-600 hover:text-red-800"
                      >
                        Excluir
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/StatusBadge.jsx ===

import React from 'react'

export default function StatusBadge({ status }) {
  const statusStyles = {
    active: 'bg-green-100 text-green-800',
    inactive: 'bg-yellow-100 text-yellow-800',
    completed: 'bg-blue-100 text-blue-800',
    canceled: 'bg-red-100 text-red-800',
    pending: 'bg-purple-100 text-purple-800'
  }

  return (
    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${statusStyles[status] || 'bg-gray-100 text-gray-800'}`}>
      {status}
    </span>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/StatCard.jsx ===

import React from 'react'
import { ArrowUpIcon, UsersIcon, TruckIcon, MapIcon } from '@heroicons/react/24/outline'

export default function StatCard({ title, value, icon, color }) {
  const Icon = {
    students: UsersIcon,
    buses: TruckIcon,
    routes: MapIcon,
    default: ArrowUpIcon
  }[icon] || ArrowUpIcon

  return (
    <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-gray-500 mb-1">{title}</p>
          <p className="text-3xl font-semibold text-gray-900">{value}</p>
        </div>
        <div className={`p-3 rounded-full bg-${color}-100`}>
          <Icon className={`w-8 h-8 text-${color}-600`} />
        </div>
      </div>
    </div>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/main.jsx ===

import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './index.css' // Make sure this line is present and before App import

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
)
=== /Users/micaelsantana/Documents/app-frontend/src/App.jsx ===

import React from 'react'
import { Routes, Route, Link } from 'react-router-dom'
import Dashboard from './pages/Dashboard'
import Alunos from './pages/Alunos'
import Login from './pages/Login'
import Onibus from './pages/Onibus'
import Rotas from './pages/Rotas'
import Viagens from './pages/Viagens'

const App = () => {
  return (
    <div className="min-h-screen bg-gray-100 flex">
      {/* Sidebar */}
      <div className="w-64 bg-gray-800 text-white fixed h-full">
        <div className="p-4 border-b border-gray-700">
          <h2 className="text-xl font-bold text-blue-400">Coracao</h2>
          <p className="text-sm text-gray-400">Sistema de Transporte</p>
        </div>
        
        <nav className="mt-4">
          <ul>
            <li>
              <Link 
                to="/dashboard"
                className="flex items-center px-4 py-3 w-full text-left text-gray-300 hover:bg-gray-700"
              >
                <span>Dashboard</span>
              </Link>
            </li>
            <li>
              <Link 
                to="/onibus"
                className="flex items-center px-4 py-3 w-full text-left text-gray-300 hover:bg-gray-700"
              >
                <span>Ônibus</span>
              </Link>
            </li>
            <li>
              <Link 
                to="/alunos"
                className="flex items-center px-4 py-3 w-full text-left text-gray-300 hover:bg-gray-700"
              >
                <span>Alunos</span>
              </Link>
            </li>
            <li>
              <Link 
                to="/rotas"
                className="flex items-center px-4 py-3 w-full text-left text-gray-300 hover:bg-gray-700"
              >
                <span>Rotas</span>
              </Link>
            </li>
            <li>
              <Link 
                to="/viagens"
                className="flex items-center px-4 py-3 w-full text-left text-gray-300 hover:bg-gray-700"
              >
                <span>Viagens</span>
              </Link>
            </li>
            <li className="mt-6 border-t border-gray-700 pt-4">
              <Link 
                to="/login"
                className="flex items-center px-4 py-3 w-full text-left text-gray-300 hover:bg-gray-700"
              >
                <span>Sair</span>
              </Link>
            </li>
          </ul>
        </nav>
      </div>
      
      {/* Main Content */}
      <div className="ml-64 flex-1">
        <Routes>
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/" element={<Dashboard />} />
          <Route path="/alunos" element={<Alunos />} />
          <Route path="/onibus" element={<Onibus />} />
          <Route path="/rotas" element={<Rotas />} />
          <Route path="/viagens" element={<Viagens />} />
          <Route path="/login" element={<Login />} />
        </Routes>
      </div>
    </div>
  )
}

export default App
=== /Users/micaelsantana/Documents/app-frontend/src/api/services.js ===

import axios from 'axios';

const api = axios.create({
  baseURL: '/api',
  headers: {
    'Content-Type': 'application/json'
  }
});

export const AlunoService = {
  getAlunos: () => api.get('/alunos'),
  createAluno: (data) => api.post('/alunos', data),
  updateAluno: (id, data) => api.put(`/alunos/${id}`, data),
  deleteAluno: (id) => api.delete(`/alunos/${id}`)
};

export const OnibusService = {
  getOnibus: () => api.get('/onibus'),
  createOnibus: (data) => api.post('/onibus', data),
  updateOnibus: (id, data) => api.put(`/onibus/${id}`, data),
  deleteOnibus: (id) => api.delete(`/onibus/${id}`)
};

export const RotaService = {
  getRotas: () => api.get('/rotas'),
  createRota: (data) => api.post('/rotas', data),
  updateRota: (id, data) => api.put(`/rotas/${id}`, data),
  deleteRota: (id) => api.delete(`/rotas/${id}`)
};

export const ViagemService = {
  getViagens: () => api.get('/viagens'),
  createViagem: (data) => api.post('/viagens', data),
  updateViagem: (id, data) => api.put(`/viagens/${id}`, data),
  deleteViagem: (id) => api.delete(`/viagens/${id}`)
};

export const MonitorService = {
  getMonitores: () => api.get('/monitores'),
  createMonitor: (data) => api.post('/monitores', data),
  updateMonitor: (id, data) => api.put(`/monitores/${id}`, data),
  deleteMonitor: (id) => api.delete(`/monitores/${id}`)
};

export const MotoristaService = {
  getMotoristas: () => api.get('/motoristas'),
  createMotorista: (data) => api.post('/motoristas', data),
  updateMotorista: (id, data) => api.put(`/motoristas/${id}`, data),
  deleteMotorista: (id) => api.delete(`/motoristas/${id}`)
};
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Alunos.jsx ===

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import DataTable from '../components/common/DataTable';
import { AlunoService } from '../api/services';

export default function Alunos() {
  const [alunos, setAlunos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  // Mock data for when API fails
  const mockAlunosData = [
    {
      id: 1,
      nome: 'Pedro Souza',
      responsavel: 'Marta Souza',
      endereco: 'Rua dos Lírios, 45 - Escalvados',
      status: 'active'
    },
    {
      id: 2,
      nome: 'Mariana Costa',
      responsavel: 'Carlos Costa',
      endereco: 'Avenida das Pedras, 78 - Pedreiras',
      status: 'active'
    },
    {
      id: 3,
      nome: 'Lucas Ferreira',
      responsavel: 'Fernanda Ferreira',
      endereco: 'Rua das Oliveiras, 123 - Volta Grande',
      status: 'active'
    },
    {
      id: 4,
      nome: 'Julia Lima',
      responsavel: 'Marcos Lima',
      endereco: 'Travessa dos Ipês, 56 - Escalvados',
      status: 'active'
    },
    {
      id: 5,
      nome: 'Gabriel Santos',
      responsavel: 'Patricia Santos',
      endereco: 'Alameda dos Cedros, 89 - Pedreiras',
      status: 'active'
    }
  ];

  useEffect(() => {
    fetchAlunos();
  }, []);

  const fetchAlunos = async () => {
    try {
      setLoading(true);
      const response = await AlunoService.getAlunos();
      
      // Check if response has the expected structure
      if (response?.data?.data && Array.isArray(response.data.data)) {
        setAlunos(response.data.data);
      } else {
        console.log('API returned unexpected data format, using mock data');
        setAlunos(mockAlunosData);
      }
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setAlunos(mockAlunosData);
      setError('Erro ao carregar alunos: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { key: 'nome', header: 'Nome' },
    { key: 'responsavel', header: 'Responsável' },
    { key: 'endereco', header: 'Endereço' },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => (
        <span className={`px-2 py-1 rounded-full text-xs ${
          item.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
        }`}>
          {item.status === 'active' ? 'Ativo' : 'Inativo'}
        </span>
      )
    }
  ];

  const handleEdit = (aluno) => {
    console.log('Editar aluno:', aluno);
  };

  const handleDelete = async (aluno) => {
    if(window.confirm(`Deseja excluir ${aluno.nome}?`)) {
      try {
        await AlunoService.deleteAluno(aluno.id);
        fetchAlunos();
      } catch (err) {
        setError('Erro ao excluir aluno: ' + err.message);
      }
    }
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Alunos</h1>
        <button
          onClick={() => navigate('/alunos/novo')}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Novo Aluno
        </button>
      </div>

      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4">
          <h2 className="font-bold text-lg">Alunos Cadastrados</h2>
        </div>
        <div className="p-4">
          <DataTable
            columns={columns}
            data={alunos}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={error}
          />
        </div>
      </div>
    </div>
  );
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Rotas.jsx ===

import React, { useState, useEffect } from 'react';
import { RotaService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';

const Rotas = () => {
  const [rotas, setRotas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Mock data for when API fails
  const mockRotasData = [
    {
      id: 1,
      nome: 'Rota Escalvados - Manhã',
      tipo: 'Escalvados e Escalvadinhos',
      distancia_km: 15.5,
      tempo_estimado_minutos: 45,
      status: 'active'
    },
    {
      id: 2,
      nome: 'Rota Pedreiras - Manhã',
      tipo: 'Pedreiras',
      distancia_km: 18.2,
      tempo_estimado_minutos: 55,
      status: 'active'
    },
    {
      id: 3,
      nome: 'Rota Volta Grande - Manhã',
      tipo: 'Volta Grande',
      distancia_km: 22.7,
      tempo_estimado_minutos: 65,
      status: 'active'
    },
    {
      id: 4,
      nome: 'Rota Escalvados - Tarde',
      tipo: 'Escalvados e Escalvadinhos',
      distancia_km: 15.5,
      tempo_estimado_minutos: 50,
      status: 'active'
    },
    {
      id: 5,
      nome: 'Rota Pedreiras - Tarde',
      tipo: 'Pedreiras',
      distancia_km: 18.2,
      tempo_estimado_minutos: 60,
      status: 'inactive'
    }
  ];

  useEffect(() => {
    fetchRotas();
  }, []);

  const fetchRotas = async () => {
    try {
      setLoading(true);
      const response = await RotaService.getRotas();
      setRotas(response.data.data);
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setRotas(mockRotasData);
      setError('Erro ao carregar rotas: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { key: 'nome', header: 'Nome' },
    { key: 'tipo', header: 'Tipo' },
    { key: 'distancia_km', header: 'Distância', format: (item) => `${item.distancia_km} km` },
    { key: 'tempo_estimado_minutos', header: 'Tempo Est.', format: (item) => `${item.tempo_estimado_minutos} min` },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => (
        <span className={`px-2 py-1 rounded-full text-xs ${
          item.status === 'active' 
            ? 'bg-green-100 text-green-800' 
            : item.status === 'inactive'
              ? 'bg-yellow-100 text-yellow-800'
              : 'bg-red-100 text-red-800'
        }`}>
          {item.status === 'active' ? 'Ativa' : item.status === 'inactive' ? 'Temporária' : 'Inativa'}
        </span>
      )
    }
  ];

  const handleEdit = (rota) => {
    console.log('Editar rota:', rota);
  };

  const handleDelete = async (rota) => {
    if(window.confirm(`Deseja excluir a rota ${rota.nome}?`)) {
      try {
        await RotaService.deleteRota(rota.id);
        fetchRotas();
      } catch (err) {
        setError('Erro ao excluir rota: ' + err.message);
      }
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Rotas</h1>
        <button className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Nova Rota
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4">
          <h2 className="font-bold text-lg">Rotas Cadastradas</h2>
        </div>
        <div className="p-4">
          <DataTable
            columns={columns}
            data={rotas}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={error}
          />
        </div>
      </div>
    </div>
  );
};

export default Rotas;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Dashboard.jsx ===

import React from 'react';
import StatCard from '../components/common/StatCard';

export default function Dashboard() {
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState(null);

  // Mock data for dashboard
  const stats = {
    onibusAtivos: 2,
    totalAlunos: 5,
    rotasAtivas: 4,
    viagensHoje: 2
  };

  // Mock data for tables
  const viagensData = [
    {
      id: 8,
      data_viagem: '2025-03-12',
      rota: 'Rota Escalvados - Manhã',
      status: 'Programada'
    },
    {
      id: 9,
      data_viagem: '2025-03-12',
      rota: 'Rota Pedreiras - Manhã',
      status: 'Programada'
    }
  ];

  const rotasData = [
    {
      id: 1,
      nome: 'Rota Escalvados - Manhã',
      tipo: 'Escalvados e Escalvadinhos',
      status: 'Ativa'
    },
    {
      id: 2,
      nome: 'Rota Pedreiras - Manhã',
      tipo: 'Pedreiras',
      status: 'Ativa'
    },
    {
      id: 3,
      nome: 'Rota Volta Grande - Manhã',
      tipo: 'Volta Grande',
      status: 'Ativa'
    }
  ];

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">Dashboard</h1>
      <p className="text-gray-600 mb-6">Bem-vindo ao sistema de transporte Coracao. Acompanhe as principais informações do sistema.</p>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold">{stats.onibusAtivos}</div>
              <div className="text-gray-500">Ônibus Ativos</div>
            </div>
            <div className="bg-blue-100 text-blue-500 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12" />
              </svg>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold">{stats.totalAlunos}</div>
              <div className="text-gray-500">Alunos Cadastrados</div>
            </div>
            <div className="bg-green-100 text-green-500 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m.94 3.198.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0 1 12 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 0 1 6 18.719m12 0a5.971 5.971 0 0 0-.941-3.197m0 0A5.995 5.995 0 0 0 12 12.75a5.995 5.995 0 0 0-5.058 2.772m0 0a3 3 0 0 0-4.681 2.72 8.986 8.986 0 0 0 3.74.477m.94-3.197a5.971 5.971 0 0 0-.94 3.197M15 6.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm6 3a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm-13.5 0a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold">{stats.viagensHoje}</div>
              <div className="text-gray-500">Viagens Programadas</div>
            </div>
            <div className="bg-purple-100 text-purple-500 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m0 0H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V9.375c0-.621-.504-1.125-1.125-1.125H8.25ZM6.75 12h.008v.008H6.75V12Zm0 3h.008v.008H6.75V15Zm0 3h.008v.008H6.75V18Z" />
              </svg>
            </div>
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow">
          <div className="border-b px-6 py-4 flex justify-between items-center">
            <h2 className="font-bold text-lg">Próximas Viagens</h2>
          </div>
          <div className="p-4">
            <table className="w-full">
              <thead>
                <tr className="text-left bg-gray-50">
                  <th className="p-3">Data</th>
                  <th className="p-3">Rota</th>
                  <th className="p-3">Status</th>
                </tr>
              </thead>
              <tbody>
                {viagensData.map((viagem, index) => (
                  <tr key={index} className="border-t">
                    <td className="p-3">{viagem.data_viagem}</td>
                    <td className="p-3">{viagem.rota}</td>
                    <td className="p-3">
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                        {viagem.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow">
          <div className="border-b px-6 py-4">
            <h2 className="font-bold text-lg">Rotas Ativas</h2>
          </div>
          <div className="p-4">
            <table className="w-full">
              <thead>
                <tr className="text-left bg-gray-50">
                  <th className="p-3">Nome</th>
                  <th className="p-3">Tipo</th>
                  <th className="p-3">Status</th>
                </tr>
              </thead>
              <tbody>
                {rotasData.map((rota, index) => (
                  <tr key={index} className="border-t">
                    <td className="p-3">{rota.nome}</td>
                    <td className="p-3">{rota.tipo}</td>
                    <td className="p-3">
                      <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                        {rota.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Login.jsx ===

import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'

export default function Login() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const navigate = useNavigate()

  const handleSubmit = (e) => {
    e.preventDefault()
    if(username === 'admin' && password === 'admin') {
      navigate('/dashboard')
    } else {
      setError('Credenciais inválidas. Use admin/admin')
    }
  }

  return (
    <div className="bg-gray-100 min-h-screen flex items-center justify-center">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-blue-500">Coracao</h1>
          <p className="text-gray-600">Sistema de Gerenciamento de Transporte</p>
        </div>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Usuário</label>
            <input 
              type="text" 
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md" 
              placeholder="Digite seu usuário"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700">Senha</label>
            <input 
              type="password" 
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md" 
              placeholder="Digite sua senha"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          
          {error && (
            <div className="text-red-600 text-sm mt-2">
              {error}
            </div>
          )}
          
          <button 
            type="submit"
            className="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md"
          >
            Entrar
          </button>
        </form>
        
        <div className="mt-6 bg-gray-100 p-4 rounded-md text-sm">
          <p>Para demonstração, use:</p>
          <p>Usuário: <strong>admin</strong></p>
          <p>Senha: <strong>admin</strong></p>
        </div>
      </div>
    </div>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Viagens.jsx ===

import React, { useState, useEffect } from 'react';
import { ViagemService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';

const Viagens = () => {
  const [viagens, setViagens] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Mock data for when API fails
  const mockViagensData = [
    {
      id: 1,
      data_viagem: '2025-03-10',
      rota: 'Rota Escalvados - Manhã',
      motorista: 'José da Silva',
      onibus: 'ABC-1234',
      status: 'completed'
    },
    {
      id: 2,
      data_viagem: '2025-03-10',
      rota: 'Rota Pedreiras - Manhã',
      motorista: 'Maria Oliveira',
      onibus: 'DEF-5678',
      status: 'completed'
    },
    {
      id: 3,
      data_viagem: '2025-03-10',
      rota: 'Rota Volta Grande - Manhã',
      motorista: 'Carlos Pereira',
      onibus: 'GHI-9012',
      status: 'completed'
    },
    {
      id: 8,
      data_viagem: '2025-03-12',
      rota: 'Rota Escalvados - Manhã',
      motorista: 'José da Silva',
      onibus: 'ABC-1234',
      status: 'pending'
    },
    {
      id: 9,
      data_viagem: '2025-03-12',
      rota: 'Rota Pedreiras - Manhã',
      motorista: 'Maria Oliveira',
      onibus: 'DEF-5678',
      status: 'pending'
    }
  ];

  useEffect(() => {
    fetchViagens();
  }, []);

  const fetchViagens = async () => {
    try {
      setLoading(true);
      const response = await ViagemService.getViagens();
      setViagens(response.data.data);
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setViagens(mockViagensData);
      setError('Erro ao carregar viagens: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { key: 'data_viagem', header: 'Data' },
    { key: 'rota', header: 'Rota' },
    { key: 'motorista', header: 'Motorista' },
    { key: 'onibus', header: 'Ônibus' },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => (
        <span className={`px-2 py-1 rounded-full text-xs ${
          item.status === 'completed' 
            ? 'bg-green-100 text-green-800' 
            : item.status === 'pending'
              ? 'bg-yellow-100 text-yellow-800'
              : item.status === 'in_progress'
                ? 'bg-blue-100 text-blue-800'
                : 'bg-red-100 text-red-800'
        }`}>
          {
            item.status === 'completed' ? 'Concluída' : 
            item.status === 'pending' ? 'Programada' : 
            item.status === 'in_progress' ? 'Em andamento' : 
            'Cancelada'
          }
        </span>
      )
    }
  ];

  const handleEdit = (viagem) => {
    console.log('Editar viagem:', viagem);
  };

  const handleDelete = async (viagem) => {
    if(window.confirm(`Deseja excluir a viagem de ${viagem.data_viagem}?`)) {
      try {
        await ViagemService.deleteViagem(viagem.id);
        fetchViagens();
      } catch (err) {
        setError('Erro ao excluir viagem: ' + err.message);
      }
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Viagens</h1>
        <button className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Nova Viagem
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4">
          <h2 className="font-bold text-lg">Viagens Programadas</h2>
        </div>
        <div className="p-4">
          <DataTable
            columns={columns}
            data={viagens}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={error}
          />
        </div>
      </div>
    </div>
  );
};

export default Viagens;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Onibus.jsx ===

import React, { useState, useEffect } from 'react';
import { OnibusService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';

const Onibus = () => {
  const [onibus, setOnibus] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Mock data for when API fails
  const mockOnibusData = [
    {
      id: 1,
      placa: 'ABC-1234',
      capacidade: 48,
      modelo: 'Mercedes-Benz OF-1721',
      ano_fabricacao: 2018,
      status: 'active'
    },
    {
      id: 2,
      placa: 'DEF-5678',
      capacidade: 52,
      modelo: 'Volkswagen 17.230 OD',
      ano_fabricacao: 2019,
      status: 'active'
    },
    {
      id: 3,
      placa: 'GHI-9012',
      capacidade: 44,
      modelo: 'Volvo B270F',
      ano_fabricacao: 2017,
      status: 'inactive'
    }
  ];

  useEffect(() => {
    fetchOnibus();
  }, []);

  const fetchOnibus = async () => {
    try {
      setLoading(true);
      const response = await OnibusService.getOnibus();
      setOnibus(response.data.data);
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setOnibus(mockOnibusData);
      setError('Erro ao carregar ônibus: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { key: 'placa', header: 'Placa' },
    { key: 'modelo', header: 'Modelo' },
    { key: 'ano_fabricacao', header: 'Ano' },
    { key: 'capacidade', header: 'Capacidade', format: (item) => `${item.capacidade} passageiros` },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => (
        <span className={`px-2 py-1 rounded-full text-xs ${
          item.status === 'active' 
            ? 'bg-green-100 text-green-800' 
            : item.status === 'inactive'
              ? 'bg-yellow-100 text-yellow-800'
              : 'bg-red-100 text-red-800'
        }`}>
          {item.status === 'active' ? 'Ativo' : item.status === 'inactive' ? 'Manutenção' : 'Inativo'}
        </span>
      )
    }
  ];

  const handleEdit = (onibus) => {
    console.log('Editar ônibus:', onibus);
  };

  const handleDelete = async (onibus) => {
    if(window.confirm(`Deseja excluir o ônibus de placa ${onibus.placa}?`)) {
      try {
        await OnibusService.deleteOnibus(onibus.id);
        fetchOnibus();
      } catch (err) {
        setError('Erro ao excluir ônibus: ' + err.message);
      }
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Ônibus</h1>
        <button className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Novo Ônibus
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4">
          <h2 className="font-bold text-lg">Frota de Ônibus</h2>
        </div>
        <div className="p-4">
          <DataTable
            columns={columns}
            data={onibus}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={error}
          />
        </div>
      </div>
    </div>
  );
};

export default Onibus;
=== /Users/micaelsantana/Documents/app-frontend/package.json ===

{
  "type": "module",
  "name": "transporte-escolar-frontend",
  "private": true,
  "version": "0.1.0",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.1",
    "axios": "^1.6.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.55.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "vite": "^5.0.0"
  }
}

=== /Users/micaelsantana/Documents/app-frontend/tailwind.config.cjs ===

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {
        colors: {
          primary: '#1e40af',
          secondary: '#1d4ed8',
          success: '#16a34a',
          danger: '#dc2626'
        }
      },
    },
    plugins: [],
    safelist: [
      // Add dynamic classes that might be purged
      'bg-blue-100',
      'text-blue-500',
      'bg-green-100',
      'text-green-500',
      'bg-purple-100',
      'text-purple-500',
      'bg-yellow-100',
      'text-yellow-800',
      'bg-red-100',
      'text-red-800',
    ]
  }
=== /Users/micaelsantana/Documents/app-frontend/postcss.config.cjs ===

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
=== /Users/micaelsantana/Documents/app-frontend/vite.config.js ===

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false
      }
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  },
  resolve: {
    alias: {
      '@': '/src'
    }
  }
})