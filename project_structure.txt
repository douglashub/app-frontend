
=== /Users/micaelsantana/Documents/app-frontend/src/index.css ===

@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
  overflow-x: hidden;
}

body {
  @apply min-h-screen bg-blue-50;
}

.primary {
  @apply text-blue-600;
}

.secondary {
  @apply text-green-600;
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/DataTable.jsx ===

import React, { useState } from 'react'

export default function DataTable({ 
  columns, 
  data = [], 
  onEdit, 
  onDelete,
  loading,
  error
}) {
  // Ensure data is always an array
  const safeData = Array.isArray(data) ? data : [];
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 10;
  const totalPages = Math.ceil(safeData.length / rowsPerPage);
  const paginatedData = safeData.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );
  
  return (
    <div className="bg-white overflow-hidden">
      {loading && (
        <div className="flex justify-center items-center p-8">
          <div className="flex items-center">
            <svg className="animate-spin h-5 w-5 mr-3 text-blue-500" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span>Carregando dados...</span>
          </div>
        </div>
      )}

      {error && (
        <div className="p-4 text-red-600 bg-red-50 rounded-md m-4 flex items-start">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
          <span>{error}</span>
        </div>
      )}

      {!loading && !error && (
        <>
          <div className="overflow-x-auto">
            <table className="w-full table-auto min-w-full">
              <thead>
                <tr className="text-left border-b">
                  {columns.map((col) => (
                    <th key={col.key} scope="col" className="px-4 py-3 text-sm font-medium text-gray-500 uppercase">
                      {col.header}
                    </th>
                  ))}
                  <th scope="col" className="px-4 py-3 text-right text-sm font-medium text-gray-500 uppercase">
                    Ações
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100">
                {paginatedData.length === 0 ? (
                  <tr>
                    <td colSpan={columns.length + 1} className="px-4 py-8 text-center text-gray-500">
                      <div className="flex flex-col items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-gray-300 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span>Nenhum registro encontrado</span>
                      </div>
                    </td>
                  </tr>
                ) : (
                  paginatedData.map((item) => (
                    <tr key={item.id} className="hover:bg-gray-50">
                      {columns.map((col) => (
                        <td key={col.key} className="px-4 py-3 text-sm text-gray-900">
                          {col.format ? col.format(item) : item[col.key]}
                        </td>
                      ))}
                      <td className="px-4 py-3 text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <button
                            onClick={() => onEdit(item)}
                            className="text-blue-600 hover:text-blue-800"
                            title="Editar"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                          <button
                            onClick={() => onDelete(item)}
                            className="text-red-600 hover:text-red-800"
                            title="Excluir"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
          
          {/* Pagination Controls */}
          {totalPages > 1 && (
            <div className="px-6 py-3 flex items-center justify-between border-t border-gray-200">
              <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                  <p className="text-sm text-gray-700">
                    Mostrando <span className="font-medium">{(currentPage - 1) * rowsPerPage + 1}</span> a <span className="font-medium">
                      {Math.min(currentPage * rowsPerPage, safeData.length)}
                    </span> de <span className="font-medium">{safeData.length}</span> resultados
                  </p>
                </div>
                <div>
                  <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                    <button
                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                      disabled={currentPage === 1}
                      className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
                        currentPage === 1 
                          ? 'text-gray-300 cursor-not-allowed' 
                          : 'text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      <span className="sr-only">Anterior</span>
                      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </button>
                    
                    {/* Page Numbers */}
                    {[...Array(totalPages)].map((_, i) => (
                      <button
                        key={i}
                        onClick={() => setCurrentPage(i + 1)}
                        className={`relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium ${
                          currentPage === i + 1
                            ? 'bg-blue-50 border-blue-500 text-blue-600 z-10'
                            : 'bg-white text-gray-500 hover:bg-gray-50'
                        }`}
                      >
                        {i + 1}
                      </button>
                    ))}
                    
                    <button
                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                      disabled={currentPage === totalPages}
                      className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
                        currentPage === totalPages 
                          ? 'text-gray-300 cursor-not-allowed' 
                          : 'text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      <span className="sr-only">Próximo</span>
                      <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                      </svg>
                    </button>
                  </nav>
                </div>
              </div>
              
              {/* Mobile pagination */}
              <div className="flex sm:hidden justify-between items-center w-full">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className={`relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md ${
                    currentPage === 1 
                      ? 'text-gray-300 bg-gray-50 cursor-not-allowed' 
                      : 'text-gray-700 bg-white hover:bg-gray-50'
                  }`}
                >
                  Anterior
                </button>
                <span className="text-sm text-gray-500">
                  Página {currentPage} de {totalPages}
                </span>
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className={`relative inline-flex items-center px-4 py-2 ml-3 border border-gray-300 text-sm font-medium rounded-md ${
                    currentPage === totalPages 
                      ? 'text-gray-300 bg-gray-50 cursor-not-allowed' 
                      : 'text-gray-700 bg-white hover:bg-gray-50'
                  }`}
                >
                  Próximo
                </button>
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
};
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/StatusBadge.jsx ===

import React from 'react'

export default function StatusBadge({ status, type = 'default', size = 'md' }) {
  // Status types can be expanded for different contexts
  const statusMap = {
    // Generic statuses
    active: { bg: 'bg-green-100', text: 'text-green-800', label: 'active' },
    inactive: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'inactive' },
    pending: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'Pendente' },
    completed: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Concluído' },
    canceled: { bg: 'bg-red-100', text: 'text-red-800', label: 'Cancelada' },
    
    // Ônibus specific
    maintenance: { bg: 'bg-orange-100', text: 'text-orange-800', label: 'Em Manutenção' },
    
    // Viagem specific
    in_progress: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Em Andamento' },
    scheduled: { bg: 'bg-purple-100', text: 'text-purple-800', label: 'Programada' },
    
    // Aluno specific
    enrolled: { bg: 'bg-green-100', text: 'text-green-800', label: 'Matriculado' },
    graduated: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Formado' },
    
    // Fallback
    default: { bg: 'bg-gray-100', text: 'text-gray-800', label: status }
  };

  // For context-specific labels we can override based on type
  const contextMap = {
    aluno: {
      active: { label: 'Ativo' },
      inactive: { label: 'Inativo' }
    },
    onibus: {
      active: { label: 'Em Operação' },
      inactive: { label: 'Fora de Serviço' }
    },
    rota: {
      active: { label: 'Ativa' },
      inactive: { label: 'Temporária' }
    },
    viagem: {
      completed: { label: 'Concluída' },
      pending: { label: 'Programada' },
      in_progress: { label: 'Em andamento' },
      canceled: { label: 'Cancelada' }
    }
  };

  // Size variants
  const sizeClasses = {
    sm: 'px-2 py-0.5 text-xs',
    md: 'px-2 py-1 text-xs',
    lg: 'px-2 py-1 text-xs'
  };

  // Get base styling
  const baseStyle = statusMap[status] || statusMap.default;
  
  // Apply context override if applicable
  let label = baseStyle.label;
  if (contextMap[type] && contextMap[type][status]) {
    label = contextMap[type][status].label;
  }
  
  return (
    <span className={`inline-flex items-center justify-center rounded-full font-normal ${baseStyle.bg} ${baseStyle.text} ${sizeClasses[size]}`}>
      {label}
    </span>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/components/common/StatCard.jsx ===

import React from 'react'
import { ArrowUpIcon, UsersIcon, TruckIcon, MapIcon } from '@heroicons/react/24/outline'

export default function StatCard({ title, value, icon, color }) {
  const Icon = {
    students: UsersIcon,
    buses: TruckIcon,
    routes: MapIcon,
    default: ArrowUpIcon
  }[icon] || ArrowUpIcon

  return (
    <div className="bg-blue-50 p-6 rounded-lg shadow-sm border border-gray-100">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-gray-500 mb-1">{title}</p>
          <p className="text-3xl font-semibold text-gray-900">{value}</p>
        </div>
        <div className={`p-3 rounded-full bg-${color}-100`}>
          <Icon className={`w-8 h-8 text-${color}-600`} />
        </div>
      </div>
    </div>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/main.jsx ===

import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './index.css' // Make sure this line is present and before App import

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
)
=== /Users/micaelsantana/Documents/app-frontend/src/App.jsx ===

import React, { useState } from 'react'
import { Routes, Route, Link, useLocation } from 'react-router-dom'
import Dashboard from './pages/Dashboard'
import Alunos from './pages/Alunos'
import Login from './pages/Login'
import Onibus from './pages/Onibus'
import Rotas from './pages/Rotas'
import Viagens from './pages/Viagens'

const App = () => {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const location = useLocation();
  
  // Check if current path is active
  const isActive = (path) => {
    return location.pathname === path || 
           (location.pathname === '/' && path === '/dashboard');
  };
  
  // Don't render sidebar on login page
  if (location.pathname === '/login') {
    return (
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="*" element={<Login />} />
      </Routes>
    );
  }

  return (
    <div className="h-screen flex flex-col md:flex-row w-full bg-blue-50 overflow-hidden">
      {/* Sidebar - Always visible but collapsible on smaller screens */}
      <div className={`
        bg-gray-800 text-white transition-all duration-300 
        ${sidebarCollapsed ? 'w-16' : 'w-64'} 
        flex-shrink-0 sticky top-0 h-screen z-30
      `}>
        {/* Sidebar Header with Toggle Button */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          {!sidebarCollapsed && (
            <div>
              <h2 className="text-xl font-bold text-blue-400">Coracao</h2>
              <p className="text-sm text-gray-400">Sistema de Transporte</p>
            </div>
          )}
          <button 
            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
            className="text-gray-400 hover:text-white p-1 rounded-md"
            aria-label={sidebarCollapsed ? "Expand sidebar" : "Collapse sidebar"}
          >
            {sidebarCollapsed ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
              </svg>
            )}
          </button>
        </div>
        
        {/* Navigation Links */}
        <nav className="mt-4 overflow-y-auto h-[calc(100%-4rem)]">
          <ul>
            <li>
              <Link 
                to="/dashboard"
                className={`flex items-center py-3 px-4 w-full text-left ${isActive('/dashboard') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                title="Dashboard"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                {!sidebarCollapsed && <span className="ml-3">Dashboard</span>}
              </Link>
            </li>
            <li>
              <Link 
                to="/onibus"
                className={`flex items-center py-3 px-4 w-full text-left ${isActive('/onibus') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                title="Ônibus"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h8m-8 5h8m-4 6v-4m4 4v-4" />
                </svg>
                {!sidebarCollapsed && <span className="ml-3">Ônibus</span>}
              </Link>
            </li>
            <li>
              <Link 
                to="/alunos"
                className={`flex items-center py-3 px-4 w-full text-left ${isActive('/alunos') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                title="Alunos"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                {!sidebarCollapsed && <span className="ml-3">Alunos</span>}
              </Link>
            </li>
            <li>
              <Link 
                to="/rotas"
                className={`flex items-center py-3 px-4 w-full text-left ${isActive('/rotas') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                title="Rotas"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                </svg>
                {!sidebarCollapsed && <span className="ml-3">Rotas</span>}
              </Link>
            </li>
            <li>
              <Link 
                to="/viagens"
                className={`flex items-center py-3 px-4 w-full text-left ${isActive('/viagens') ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-700'}`}
                title="Viagens"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                {!sidebarCollapsed && <span className="ml-3">Viagens</span>}
              </Link>
            </li>
            <li className="mt-6 border-t border-gray-700 pt-4">
              <Link 
                to="/login"
                className="flex items-center py-3 px-4 w-full text-left text-gray-300 hover:bg-gray-700"
                title="Sair"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                {!sidebarCollapsed && <span className="ml-3">Sair</span>}
              </Link>
            </li>
          </ul>
        </nav>
      </div>
      
      {/* Main Content */}
      <div className="flex-1 h-full bg-blue-50 overflow-auto">
        <main className="px-6 py-4 w-full h-full">
          <Routes>
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/" element={<Dashboard />} />
            <Route path="/alunos" element={<Alunos />} />
            <Route path="/onibus" element={<Onibus />} />
            <Route path="/rotas" element={<Rotas />} />
            <Route path="/viagens" element={<Viagens />} />
          </Routes>
        </main>
      </div>
    </div>
  );
}

export default App;
=== /Users/micaelsantana/Documents/app-frontend/src/api/services.js ===

import axios from 'axios';

const api = axios.create({
  baseURL: '/api',
  headers: {
    'Content-Type': 'application/json'
  }
});

export const AlunoService = {
  getAlunos: () => api.get('/alunos'),
  createAluno: (data) => api.post('/alunos', data),
  updateAluno: (id, data) => api.put(`/alunos/${id}`, data),
  deleteAluno: (id) => api.delete(`/alunos/${id}`)
};

export const OnibusService = {
  getOnibus: () => api.get('/onibus'),
  createOnibus: (data) => api.post('/onibus', data),
  updateOnibus: (id, data) => api.put(`/onibus/${id}`, data),
  deleteOnibus: (id) => api.delete(`/onibus/${id}`)
};

export const RotaService = {
  getRotas: () => api.get('/rotas'),
  createRota: (data) => api.post('/rotas', data),
  updateRota: (id, data) => api.put(`/rotas/${id}`, data),
  deleteRota: (id) => api.delete(`/rotas/${id}`)
};

export const ViagemService = {
  getViagens: () => api.get('/viagens'),
  createViagem: (data) => api.post('/viagens', data),
  updateViagem: (id, data) => api.put(`/viagens/${id}`, data),
  deleteViagem: (id) => api.delete(`/viagens/${id}`)
};

export const MonitorService = {
  getMonitores: () => api.get('/monitores'),
  createMonitor: (data) => api.post('/monitores', data),
  updateMonitor: (id, data) => api.put(`/monitores/${id}`, data),
  deleteMonitor: (id) => api.delete(`/monitores/${id}`)
};

export const MotoristaService = {
  getMotoristas: () => api.get('/motoristas'),
  createMotorista: (data) => api.post('/motoristas', data),
  updateMotorista: (id, data) => api.put(`/motoristas/${id}`, data),
  deleteMotorista: (id) => api.delete(`/motoristas/${id}`)
};
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Alunos.jsx ===

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';
import { AlunoService } from '../api/services';

export default function Alunos() {
  const [alunos, setAlunos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  // Mock data for when API fails
  const mockAlunosData = [
    {
      id: 1,
      nome: 'Pedro Souza',
      responsavel: 'Marta Souza',
      endereco: 'Rua dos Lírios, 45 - Escalvados',
      status: 'active'
    },
    {
      id: 2,
      nome: 'Mariana Costa',
      responsavel: 'Carlos Costa',
      endereco: 'Avenida das Pedras, 78 - Pedreiras',
      status: 'active'
    },
    {
      id: 3,
      nome: 'Lucas Ferreira',
      responsavel: 'Fernanda Ferreira',
      endereco: 'Rua das Oliveiras, 123 - Volta Grande',
      status: 'active'
    },
    {
      id: 4,
      nome: 'Julia Lima',
      responsavel: 'Marcos Lima',
      endereco: 'Travessa dos Ipês, 56 - Escalvados',
      status: 'active'
    },
    {
      id: 5,
      nome: 'Gabriel Santos',
      responsavel: 'Patricia Santos',
      endereco: 'Alameda dos Cedros, 89 - Pedreiras',
      status: 'inactive'
    }
  ];

  useEffect(() => {
    fetchAlunos();
  }, []);

  const fetchAlunos = async () => {
    try {
      setLoading(true);
      const response = await AlunoService.getAlunos();
      
      // Check if response has the expected structure
      if (response?.data?.data && Array.isArray(response.data.data)) {
        setAlunos(response.data.data);
      } else {
        console.log('API returned unexpected data format, using mock data');
        setAlunos(mockAlunosData);
      }
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setAlunos(mockAlunosData);
      setError('Erro ao carregar alunos: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  // Search and filter function
  const filteredAlunos = alunos.filter(aluno => 
    aluno.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||
    aluno.responsavel.toLowerCase().includes(searchTerm.toLowerCase()) ||
    aluno.endereco.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const columns = [
    { key: 'nome', header: 'Nome' },
    { key: 'responsavel', header: 'Responsável' },
    { key: 'endereco', header: 'Endereço' },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => <StatusBadge status={item.status} type="aluno" />
    }
  ];

  const handleEdit = (aluno) => {
    console.log('Editar aluno:', aluno);
  };

  const handleDelete = async (aluno) => {
    if(window.confirm(`Deseja excluir ${aluno.nome}?`)) {
      try {
        await AlunoService.deleteAluno(aluno.id);
        fetchAlunos();
      } catch (err) {
        setError('Erro ao excluir aluno: ' + err.message);
      }
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-2xl font-bold">Gerenciamento de Alunos</h1>
        <button
          onClick={() => navigate('/alunos/novo')}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Novo Aluno
        </button>
      </div>

      <div className="bg-white overflow-hidden">
        <div className="px-4 py-3 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 bg-gray-50 border-b">
          <h2 className="font-bold text-lg">Alunos Cadastrados</h2>
          
          {/* Search box */}
          <div className="relative w-full sm:w-64">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Buscar alunos..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        
        <div className="p-4">
          {error && (
            <div className="p-4 mb-4 text-red-600 bg-red-50 rounded-md flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <span>{error}</span>
            </div>
          )}
          
          <DataTable
            columns={columns}
            data={filteredAlunos}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={null} // Error is already shown above
          />
        </div>
      </div>

      {/* Quick Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-blue-100 text-blue-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Total de Alunos</div>
            <div className="text-xl font-bold">{alunos.length}</div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-green-100 text-green-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Alunos Ativos</div>
            <div className="text-xl font-bold">
              {alunos.filter(aluno => aluno.status === 'active').length}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 flex items-center">
          <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <div>
            <div className="text-sm text-gray-500">Alunos Inativos</div>
            <div className="text-xl font-bold">
              {alunos.filter(aluno => aluno.status === 'inactive').length}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Rotas.jsx ===

import React, { useState, useEffect } from 'react';
import { RotaService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';

const Rotas = () => {
  const [rotas, setRotas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Mock data for when API fails
  const mockRotasData = [
    {
      id: 1,
      nome: 'Rota Escalvados - Manhã',
      tipo: 'Escalvados e Escalvadinhos',
      distancia_km: 15.5,
      tempo_estimado_minutos: 45,
      status: 'active'
    },
    {
      id: 2,
      nome: 'Rota Pedreiras - Manhã',
      tipo: 'Pedreiras',
      distancia_km: 18.2,
      tempo_estimado_minutos: 55,
      status: 'active'
    },
    {
      id: 3,
      nome: 'Rota Volta Grande - Manhã',
      tipo: 'Volta Grande',
      distancia_km: 22.7,
      tempo_estimado_minutos: 65,
      status: 'active'
    },
    {
      id: 4,
      nome: 'Rota Escalvados - Tarde',
      tipo: 'Escalvados e Escalvadinhos',
      distancia_km: 15.5,
      tempo_estimado_minutos: 50,
      status: 'active'
    },
    {
      id: 5,
      nome: 'Rota Pedreiras - Tarde',
      tipo: 'Pedreiras',
      distancia_km: 18.2,
      tempo_estimado_minutos: 60,
      status: 'inactive'
    }
  ];

  useEffect(() => {
    fetchRotas();
  }, []);

  const fetchRotas = async () => {
    try {
      setLoading(true);
      const response = await RotaService.getRotas();
      setRotas(response.data.data);
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setRotas(mockRotasData);
      setError('Erro ao carregar rotas: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { key: 'nome', header: 'Nome' },
    { key: 'tipo', header: 'Tipo' },
    { key: 'distancia_km', header: 'Distância', format: (item) => `${item.distancia_km} km` },
    { key: 'tempo_estimado_minutos', header: 'Tempo Est.', format: (item) => `${item.tempo_estimado_minutos} min` },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => (
        <span className={`px-2 py-1 rounded-full text-xs ${
          item.status === 'active' 
            ? 'bg-green-100 text-green-800' 
            : item.status === 'inactive'
              ? 'bg-yellow-100 text-yellow-800'
              : 'bg-red-100 text-red-800'
        }`}>
          {item.status === 'active' ? 'Ativa' : item.status === 'inactive' ? 'Temporária' : 'Inativa'}
        </span>
      )
    }
  ];

  const handleEdit = (rota) => {
    console.log('Editar rota:', rota);
  };

  const handleDelete = async (rota) => {
    if(window.confirm(`Deseja excluir a rota ${rota.nome}?`)) {
      try {
        await RotaService.deleteRota(rota.id);
        fetchRotas();
      } catch (err) {
        setError('Erro ao excluir rota: ' + err.message);
      }
    }
  };

  return (
    <div className="space-y-6 flex-1 bg-white">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Rotas</h1>
        <button className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Nova Rota
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4">
          <h2 className="font-bold text-lg">Rotas Cadastradas</h2>
        </div>
        <div className="p-4">
          <DataTable
            columns={columns}
            data={rotas}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={error}
          />
        </div>
      </div>
    </div>
  );
};

export default Rotas;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Dashboard.jsx ===

import React from 'react';
import { Link } from 'react-router-dom';

export default function Dashboard() {
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState(null);

  // Mock data for dashboard
  const stats = {
    onibusAtivos: 2,
    totalAlunos: 5,
    rotasAtivas: 4,
    viagensHoje: 2
  };

  // Mock data for tables
  const viagensData = [
    {
      id: 8,
      data_viagem: '2025-03-12',
      rota: 'Rota Escalvados - Manhã',
      status: 'Programada'
    },
    {
      id: 9,
      data_viagem: '2025-03-12',
      rota: 'Rota Pedreiras - Manhã',
      status: 'Programada'
    }
  ];

  const rotasData = [
    {
      id: 1,
      nome: 'Rota Escalvados - Manhã',
      tipo: 'Escalvados e Escalvadinhos',
      status: 'Ativa'
    },
    {
      id: 2,
      nome: 'Rota Pedreiras - Manhã',
      tipo: 'Pedreiras',
      status: 'Ativa'
    },
    {
      id: 3,
      nome: 'Rota Volta Grande - Manhã',
      tipo: 'Volta Grande',
      status: 'Ativa'
    }
  ];

  return (
    <div>
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-2">Dashboard</h1>
        <p className="text-gray-600">Bem-vindo ao sistema de transporte Coracao. Acompanhe as principais informações do sistema.</p>
      </div>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        {/* Ônibus Ativos */}
        <div className="bg-white p-6 border-b border-r border-gray-200">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.onibusAtivos}</div>
              <div className="text-gray-500 mt-1">Ônibus Ativos</div>
            </div>
            <div className="bg-blue-100 text-blue-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12" />
              </svg>
            </div>
          </div>
        </div>
        
        {/* Alunos Cadastrados */}
        <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 transition-all hover:shadow-md">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.totalAlunos}</div>
              <div className="text-gray-500 mt-1">Alunos Cadastrados</div>
            </div>
            <div className="bg-green-100 text-green-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m.94 3.198.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0 1 12 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 0 1 6 18.719m12 0a5.971 5.971 0 0 0-.941-3.197m0 0A5.995 5.995 0 0 0 12 12.75a5.995 5.995 0 0 0-5.058 2.772m0 0a3 3 0 0 0-4.681 2.72 8.986 8.986 0 0 0 3.74.477m.94-3.197a5.971 5.971 0 0 0-.94 3.197M15 6.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm6 3a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm-13.5 0a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z" />
              </svg>
            </div>
          </div>
        </div>
        
        {/* Rotas Ativas */}
        <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 transition-all hover:shadow-md">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.rotasAtivas}</div>
              <div className="text-gray-500 mt-1">Rotas Ativas</div>
            </div>
            <div className="bg-purple-100 text-purple-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 6.75V15m6-6v8.25m.503 3.498l4.875-2.437c.381-.19.622-.58.622-1.006V4.82c0-.836-.88-1.38-1.628-1.006l-3.869 1.934c-.317.159-.69.159-1.006 0L9.503 3.252a1.125 1.125 0 00-1.006 0L3.622 5.689C3.24 5.88 3 6.27 3 6.695V19.18c0 .836.88 1.38 1.628 1.006l3.869-1.934c.317-.159.69-.159 1.006 0l4.994 2.497c.317.158.69.158 1.006 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        {/* Viagens Programadas */}
        <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 transition-all hover:shadow-md">
          <div className="flex justify-between items-start">
            <div>
              <div className="text-3xl font-bold text-gray-900">{stats.viagensHoje}</div>
              <div className="text-gray-500 mt-1">Viagens Programadas</div>
            </div>
            <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
              </svg>
            </div>
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        {/* Próximas Viagens */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
          <div className="border-b px-6 py-4 flex justify-between items-center">
            <h2 className="font-bold text-lg">Próximas Viagens</h2>
            <Link to="/viagens" className="text-blue-600 hover:text-blue-800 text-sm flex items-center">
              Ver todas
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
              </svg>
            </Link>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="text-left bg-gray-50">
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Data</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Rota</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {viagensData.map((viagem, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="py-3 px-4 whitespace-nowrap">{viagem.data_viagem}</td>
                    <td className="py-3 px-4">{viagem.rota}</td>
                    <td className="py-3 px-4">
                      <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                        {viagem.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          {/* Mobile view for Próximas Viagens */}
          <div className="md:hidden px-4 pb-4 pt-2">
            <div className="text-sm text-gray-500 mb-2 font-medium">Visualização mobile</div>
            {viagensData.map((viagem, index) => (
              <div key={index} className="mb-3 bg-gray-50 p-3 rounded-lg">
                <div className="font-medium mb-1">{viagem.rota}</div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Data:</span>
                  <span>{viagem.data_viagem}</span>
                </div>
                <div className="flex justify-between text-sm mt-1">
                  <span className="text-gray-500">Status:</span>
                  <span className="px-2 py-0.5 text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                    {viagem.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* Rotas Ativas */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
          <div className="border-b px-6 py-4 flex justify-between items-center">
            <h2 className="font-bold text-lg">Rotas Ativas</h2>
            <Link to="/rotas" className="text-blue-600 hover:text-blue-800 text-sm flex items-center">
              Ver todas
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
              </svg>
            </Link>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="text-left bg-gray-50">
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Nome</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                  <th className="py-3 px-4 text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {rotasData.map((rota, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="py-3 px-4">{rota.nome}</td>
                    <td className="py-3 px-4">{rota.tipo}</td>
                    <td className="py-3 px-4">
                      <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        {rota.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          {/* Mobile view for Rotas Ativas */}
          <div className="md:hidden px-4 pb-4 pt-2">
            <div className="text-sm text-gray-500 mb-2 font-medium">Visualização mobile</div>
            {rotasData.map((rota, index) => (
              <div key={index} className="mb-3 bg-gray-50 p-3 rounded-lg">
                <div className="font-medium mb-1">{rota.nome}</div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Tipo:</span>
                  <span>{rota.tipo}</span>
                </div>
                <div className="flex justify-between text-sm mt-1">
                  <span className="text-gray-500">Status:</span>
                  <span className="px-2 py-0.5 text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    {rota.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Login.jsx ===

import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'

export default function Login() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const navigate = useNavigate()

  const handleSubmit = (e) => {
    e.preventDefault()
    setLoading(true)
    
    // Simulate API request with a delay
    setTimeout(() => {
      if(username === 'admin' && password === 'admin') {
        navigate('/dashboard')
      } else {
        setError('Credenciais inválidas. Use admin/admin')
        setLoading(false)
      }
    }, 800)
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      {/* Left side - Login Form */}
      <div className="flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8 w-full md:w-1/2">
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <h1 className="text-center text-3xl font-bold text-gray-900 mb-1">Coracao</h1>
          <h2 className="text-center text-xl font-semibold text-gray-900">Login</h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Sistema de Gerenciamento de Transporte
          </p>
        </div>

        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
          <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div>
                <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                  Nome de usuário
                </label>
                <div className="mt-1">
                  <input
                    id="username"
                    name="username"
                    type="text"
                    autoComplete="username"
                    required
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Digite seu nome de usuário"
                  />
                </div>
              </div>

              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Senha
                </label>
                <div className="mt-1">
                  <input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="current-password"
                    required
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Digite sua senha"
                  />
                </div>
              </div>

              {error && (
                <div className="bg-red-50 border-l-4 border-red-500 p-4 text-sm text-red-700">
                  <div className="flex items-center">
                    <svg className="h-5 w-5 text-red-500 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    {error}
                  </div>
                </div>
              )}

              <div>
                <button
                  type="submit"
                  disabled={loading}
                  className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                    loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}
                >
                  {loading ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Entrando...
                    </>
                  ) : 'Entrar'}
                </button>
              </div>
            </form>
            
            <div className="mt-6 bg-gray-50 p-4 rounded border border-gray-200 text-sm">
              <p className="font-medium mb-2">Para demonstração, use:</p>
              <p><span className="text-gray-500">Usuário:</span> <strong>admin</strong></p>
              <p><span className="text-gray-500">Senha:</span> <strong>admin</strong></p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Right side - Banner Image (only visible on md screens and up) */}
      <div className="hidden md:block md:w-1/2 bg-blue-600">
        <div className="h-full flex items-center justify-center p-8 text-white">
          <div className="max-w-lg">
            <h2 className="text-3xl font-bold mb-4">Sistema de Gerenciamento de Transporte Escolar</h2>
            <p className="text-lg text-blue-100 mb-6">
              Uma plataforma completa para gerenciar ônibus, rotas e alunos com eficiência e segurança.
            </p>
            <div className="space-y-4">
              <div className="flex items-center">
                <svg className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>Gerenciamento de frota escolar</span>
              </div>
              <div className="flex items-center">
                <svg className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>Controle de rotas e viagens</span>
              </div>
              <div className="flex items-center">
                <svg className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>Cadastro e acompanhamento de alunos</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Viagens.jsx ===

import React, { useState, useEffect } from 'react';
import { ViagemService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';

const Viagens = () => {
  const [viagens, setViagens] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Mock data for when API fails
  const mockViagensData = [
    {
      id: 1,
      data_viagem: '2025-03-10',
      rota: 'Rota Escalvados - Manhã',
      motorista: 'José da Silva',
      onibus: 'ABC-1234',
      status: 'completed'
    },
    {
      id: 2,
      data_viagem: '2025-03-10',
      rota: 'Rota Pedreiras - Manhã',
      motorista: 'Maria Oliveira',
      onibus: 'DEF-5678',
      status: 'completed'
    },
    {
      id: 3,
      data_viagem: '2025-03-10',
      rota: 'Rota Volta Grande - Manhã',
      motorista: 'Carlos Pereira',
      onibus: 'GHI-9012',
      status: 'completed'
    },
    {
      id: 8,
      data_viagem: '2025-03-12',
      rota: 'Rota Escalvados - Manhã',
      motorista: 'José da Silva',
      onibus: 'ABC-1234',
      status: 'pending'
    },
    {
      id: 9,
      data_viagem: '2025-03-12',
      rota: 'Rota Pedreiras - Manhã',
      motorista: 'Maria Oliveira',
      onibus: 'DEF-5678',
      status: 'pending'
    }
  ];

  useEffect(() => {
    fetchViagens();
  }, []);

  const fetchViagens = async () => {
    try {
      setLoading(true);
      const response = await ViagemService.getViagens();
      setViagens(response.data.data);
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setViagens(mockViagensData);
      setError('Erro ao carregar viagens: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { key: 'data_viagem', header: 'Data' },
    { key: 'rota', header: 'Rota' },
    { key: 'motorista', header: 'Motorista' },
    { key: 'onibus', header: 'Ônibus' },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => (
        <span className={`px-2 py-1 rounded-full text-xs ${
          item.status === 'completed' 
            ? 'bg-green-100 text-green-800' 
            : item.status === 'pending'
              ? 'bg-yellow-100 text-yellow-800'
              : item.status === 'in_progress'
                ? 'bg-blue-100 text-blue-800'
                : 'bg-red-100 text-red-800'
        }`}>
          {
            item.status === 'completed' ? 'Concluída' : 
            item.status === 'pending' ? 'Programada' : 
            item.status === 'in_progress' ? 'Em andamento' : 
            'Cancelada'
          }
        </span>
      )
    }
  ];

  const handleEdit = (viagem) => {
    console.log('Editar viagem:', viagem);
  };

  const handleDelete = async (viagem) => {
    if(window.confirm(`Deseja excluir a viagem de ${viagem.data_viagem}?`)) {
      try {
        await ViagemService.deleteViagem(viagem.id);
        fetchViagens();
      } catch (err) {
        setError('Erro ao excluir viagem: ' + err.message);
      }
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Viagens</h1>
        <button className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Nova Viagem
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4">
          <h2 className="font-bold text-lg">Viagens Programadas</h2>
        </div>
        <div className="p-4">
          <DataTable
            columns={columns}
            data={viagens}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={error}
          />
        </div>
      </div>
    </div>
  );
};

export default Viagens;
=== /Users/micaelsantana/Documents/app-frontend/src/pages/PageHeader.jsx ===

import React from 'react';

export default function PageHeader({ 
  title, 
  description,
  actionButton = null 
}) {
  return (
    <div className="bg-blue-50 flex flex-col sm:flex-row 2xl:flex-row justify-between items-start sm:items-center xl:items-center gap-4 mb-4 sm:mb-6 xl:mb-8 2xl:mb-10">
      <div>
        <h1 className="text-2xl sm:text-3xl xl:text-4xl 2xl:text-5xl font-bold">{title}</h1>
        {description && <p className="text-gray-600 mt-1 sm:mt-1.5 xl:mt-2 text-sm sm:text-base xl:text-lg 2xl:text-xl">{description}</p>}
      </div>
      
      {actionButton && (
        <div className="self-stretch sm:self-auto">
          {actionButton}
        </div>
      )}
    </div>
  );
}
=== /Users/micaelsantana/Documents/app-frontend/src/pages/Onibus.jsx ===

import React, { useState, useEffect } from 'react';
import { OnibusService } from '../api/services';
import DataTable from '../components/common/DataTable';
import StatusBadge from '../components/common/StatusBadge';

const Onibus = () => {
  const [onibus, setOnibus] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Mock data for when API fails
  const mockOnibusData = [
    {
      id: 1,
      placa: 'ABC-1234',
      capacidade: 48,
      modelo: 'Mercedes-Benz OF-1721',
      ano_fabricacao: 2018,
      status: 'active'
    },
    {
      id: 2,
      placa: 'DEF-5678',
      capacidade: 52,
      modelo: 'Volkswagen 17.230 OD',
      ano_fabricacao: 2019,
      status: 'active'
    },
    {
      id: 3,
      placa: 'GHI-9012',
      capacidade: 44,
      modelo: 'Volvo B270F',
      ano_fabricacao: 2017,
      status: 'inactive'
    }
  ];

  useEffect(() => {
    fetchOnibus();
  }, []);

  const fetchOnibus = async () => {
    try {
      setLoading(true);
      const response = await OnibusService.getOnibus();
      setOnibus(response.data.data);
    } catch (err) {
      console.error('Error fetching data, using mock data instead:', err);
      setOnibus(mockOnibusData);
      setError('Erro ao carregar ônibus: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { key: 'placa', header: 'Placa' },
    { key: 'modelo', header: 'Modelo' },
    { key: 'ano_fabricacao', header: 'Ano' },
    { key: 'capacidade', header: 'Capacidade', format: (item) => `${item.capacidade} passageiros` },
    { 
      key: 'status', 
      header: 'Status',
      format: (item) => (
        <span className={`px-2 py-1 rounded-full text-xs ${
          item.status === 'active' 
            ? 'bg-green-100 text-green-800' 
            : item.status === 'inactive'
              ? 'bg-yellow-100 text-yellow-800'
              : 'bg-red-100 text-red-800'
        }`}>
          {item.status === 'active' ? 'Ativo' : item.status === 'inactive' ? 'Manutenção' : 'Inativo'}
        </span>
      )
    }
  ];

  const handleEdit = (onibus) => {
    console.log('Editar ônibus:', onibus);
  };

  const handleDelete = async (onibus) => {
    if(window.confirm(`Deseja excluir o ônibus de placa ${onibus.placa}?`)) {
      try {
        await OnibusService.deleteOnibus(onibus.id);
        fetchOnibus();
      } catch (err) {
        setError('Erro ao excluir ônibus: ' + err.message);
      }
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciamento de Ônibus</h1>
        <button className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Novo Ônibus
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b px-6 py-4">
          <h2 className="font-bold text-lg">Frota de Ônibus</h2>
        </div>
        <div className="p-4">
          <DataTable
            columns={columns}
            data={onibus}
            onEdit={handleEdit}
            onDelete={handleDelete}
            loading={loading}
            error={error}
          />
        </div>
      </div>
    </div>
  );
};

export default Onibus;
=== /Users/micaelsantana/Documents/app-frontend/package.json ===

{
  "type": "module",
  "name": "transporte-escolar-frontend",
  "private": true,
  "version": "0.1.0",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.1",
    "axios": "^1.6.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.55.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "vite": "^5.0.0"
  }
}

=== /Users/micaelsantana/Documents/app-frontend/tailwind.config.cjs ===

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {
        screens: {
          '3xl': '1920px',
          '4xl': '2560px'
        },
        colors: {
          primary: '#1e40af',
          secondary: '#1d4ed8',
          success: '#16a34a',
          danger: '#dc2626'
        }
      },
    },
    plugins: [],
    safelist: [
      // Add dynamic classes that might be purged
      'bg-blue-100',
      'text-blue-500',
      'bg-green-100',
      'text-green-500',
      'bg-purple-100',
      'text-purple-500',
      'bg-yellow-100',
      'text-yellow-800',
      'bg-red-100',
      'text-red-800',
    ]
  }
=== /Users/micaelsantana/Documents/app-frontend/postcss.config.cjs ===

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
=== /Users/micaelsantana/Documents/app-frontend/vite.config.js ===

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false
      }
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  },
  resolve: {
    alias: {
      '@': '/src'
    }
  }
})